{"ast":null,"code":"import jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\n/**\n * Utilidad para exportar informes en formato PDF\n */\nexport const exportarInformePDF = informe => {\n  try {\n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n\n    // Configurar fuentes y colores\n    const colorPrimario = '#3498db';\n    const colorSecundario = '#2ecc71';\n\n    // Añadir encabezado con logo y título\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 30, 'F');\n\n    // Título del informe\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(22);\n    doc.text('AlhambraCRM', 105, 15, {\n      align: 'center'\n    });\n\n    // Subtítulo\n    doc.setFontSize(14);\n    doc.text('Informe: ' + informe.titulo, 105, 25, {\n      align: 'center'\n    });\n\n    // Información del informe\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n\n    // Metadatos del informe\n    doc.text('Fecha de creación: ' + formatearFecha(informe.fechaCreacion), 20, 45);\n    doc.text('Última actualización: ' + formatearFecha(informe.fechaActualizacion), 20, 55);\n    doc.text('Autor: ' + informe.autor, 20, 65);\n    doc.text('Tipo: ' + informe.tipo, 20, 75);\n    if (informe.proyecto) {\n      doc.text('Proyecto: ' + informe.proyecto, 20, 85);\n    }\n\n    // Añadir descripción\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Descripción', 20, 100);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n\n    // Dividir descripción en líneas para evitar que se salga de la página\n    const descripcionLineas = doc.splitTextToSize(informe.descripcion || '', 170);\n    doc.text(descripcionLineas, 20, 110);\n\n    // Añadir contenido principal\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Contenido', 20, 130 + descripcionLineas.length * 5);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n\n    // Dividir contenido en líneas\n    const contenidoLineas = doc.splitTextToSize(informe.contenido || '', 170);\n    doc.text(contenidoLineas, 20, 140 + descripcionLineas.length * 5);\n\n    // Añadir pie de página\n    const totalPaginas = doc.internal.getNumberOfPages();\n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n      doc.setFontSize(10);\n      doc.setTextColor(150, 150, 150);\n\n      // Pie de página con fecha y número de página\n      const fechaActual = new Date().toLocaleDateString('es-ES');\n      doc.text(`AlhambraCRM - Generado el ${fechaActual}`, 20, 285);\n      doc.text(`Página ${i} de ${totalPaginas}`, 180, 285);\n    }\n\n    // Guardar el PDF con el nombre del informe\n    doc.save(`Informe_${informe.titulo.replace(/\\s+/g, '_')}.pdf`);\n  } catch (error) {\n    console.error('Error al exportar informe a PDF:', error);\n    throw new Error('Error al generar el PDF del informe. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Utilidad para exportar lista de informes en formato PDF\n */\nexport const exportarListaInformesPDF = (informes, filtros = {}) => {\n  try {\n    console.log('Exportando lista de informes:', informes);\n\n    // Validar que informes sea un array\n    if (!Array.isArray(informes)) {\n      throw new Error('La lista de informes no es válida');\n    }\n\n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n\n    // Configurar fuentes y colores\n    const colorPrimario = '#3498db';\n\n    // Añadir encabezado con logo y título\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 30, 'F');\n\n    // Título\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(22);\n    doc.text('AlhambraCRM', 105, 15, {\n      align: 'center'\n    });\n\n    // Subtítulo\n    doc.setFontSize(14);\n    doc.text('Listado de Informes', 105, 25, {\n      align: 'center'\n    });\n\n    // Información de filtros\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    let textoFiltros = 'Todos los informes';\n    if (filtros.tipo && filtros.tipo !== 'todos') {\n      textoFiltros = `Tipo: ${filtros.tipo}`;\n    }\n    doc.text(`Filtros aplicados: ${textoFiltros}`, 20, 45);\n    doc.text(`Total de informes: ${informes.length}`, 20, 55);\n    doc.text(`Fecha de generación: ${new Date().toLocaleDateString('es-ES')}`, 20, 65);\n\n    // Crear tabla con los informes\n    const columnas = [{\n      header: 'Título',\n      dataKey: 'titulo'\n    }, {\n      header: 'Tipo',\n      dataKey: 'tipo'\n    }, {\n      header: 'Autor',\n      dataKey: 'autor'\n    }, {\n      header: 'Fecha',\n      dataKey: 'fechaActualizacion'\n    }, {\n      header: 'Proyecto',\n      dataKey: 'proyecto'\n    }];\n    const filas = informes.map(informe => ({\n      titulo: informe.titulo || '',\n      tipo: informe.tipo || '',\n      autor: informe.autor || '',\n      fechaActualizacion: formatearFecha(informe.fechaActualizacion),\n      proyecto: informe.proyecto || '-'\n    }));\n    doc.autoTable({\n      startY: 75,\n      head: [columnas.map(col => col.header)],\n      body: filas.map(fila => columnas.map(col => fila[col.dataKey])),\n      theme: 'grid',\n      headStyles: {\n        fillColor: colorPrimario,\n        textColor: [255, 255, 255],\n        fontStyle: 'bold'\n      },\n      alternateRowStyles: {\n        fillColor: [240, 240, 240]\n      },\n      margin: {\n        top: 75\n      }\n    });\n\n    // Añadir pie de página\n    const totalPaginas = doc.internal.getNumberOfPages();\n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n      doc.setFontSize(10);\n      doc.setTextColor(150, 150, 150);\n\n      // Pie de página con fecha y número de página\n      const fechaActual = new Date().toLocaleDateString('es-ES');\n      doc.text(`AlhambraCRM - Generado el ${fechaActual}`, 20, 285);\n      doc.text(`Página ${i} de ${totalPaginas}`, 180, 285);\n    }\n\n    // Guardar el PDF\n    doc.save('Listado_Informes.pdf');\n  } catch (error) {\n    console.error('Error al exportar lista de informes a PDF:', error);\n    throw new Error('Error al generar el PDF de la lista de informes. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Utilidad para exportar informes en formato Excel\n * En una implementación real, esto se haría con una biblioteca como xlsx\n * Por ahora, simplemente mostramos un mensaje de que esta funcionalidad está en desarrollo\n */\nexport const exportarInformeExcel = informe => {\n  alert('La exportación a Excel está en desarrollo. Estará disponible próximamente.');\n};\n\n/**\n * Formatear fecha para mostrar en el PDF\n */\nconst formatearFecha = fechaStr => {\n  if (!fechaStr) return '-';\n  try {\n    const fecha = new Date(fechaStr);\n    if (isNaN(fecha.getTime())) return '-';\n    return fecha.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return '-';\n  }\n};\nexport default {\n  exportarInformePDF,\n  exportarListaInformesPDF,\n  exportarInformeExcel\n};","map":{"version":3,"names":["jsPDF","exportarInformePDF","informe","doc","colorPrimario","colorSecundario","setFillColor","rect","setFont","setTextColor","setFontSize","text","align","titulo","formatearFecha","fechaCreacion","fechaActualizacion","autor","tipo","proyecto","descripcionLineas","splitTextToSize","descripcion","length","contenidoLineas","contenido","totalPaginas","internal","getNumberOfPages","i","setPage","fechaActual","Date","toLocaleDateString","save","replace","error","console","Error","exportarListaInformesPDF","informes","filtros","log","Array","isArray","textoFiltros","columnas","header","dataKey","filas","map","autoTable","startY","head","col","body","fila","theme","headStyles","fillColor","textColor","fontStyle","alternateRowStyles","margin","top","exportarInformeExcel","alert","fechaStr","fecha","isNaN","getTime","day","month","year"],"sources":["C:/Users/andre/Desktop/ProyectoAndres/alhambraCrm/frontend_react/src/utilidades/exportarPDF.js"],"sourcesContent":["import jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\n/**\n * Utilidad para exportar informes en formato PDF\n */\nexport const exportarInformePDF = (informe) => {\n  try {\n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n    \n    // Configurar fuentes y colores\n    const colorPrimario = '#3498db';\n    const colorSecundario = '#2ecc71';\n    \n    // Añadir encabezado con logo y título\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 30, 'F');\n    \n    // Título del informe\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(22);\n    doc.text('AlhambraCRM', 105, 15, { align: 'center' });\n    \n    // Subtítulo\n    doc.setFontSize(14);\n    doc.text('Informe: ' + informe.titulo, 105, 25, { align: 'center' });\n    \n    // Información del informe\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    \n    // Metadatos del informe\n    doc.text('Fecha de creación: ' + formatearFecha(informe.fechaCreacion), 20, 45);\n    doc.text('Última actualización: ' + formatearFecha(informe.fechaActualizacion), 20, 55);\n    doc.text('Autor: ' + informe.autor, 20, 65);\n    doc.text('Tipo: ' + informe.tipo, 20, 75);\n    \n    if (informe.proyecto) {\n      doc.text('Proyecto: ' + informe.proyecto, 20, 85);\n    }\n    \n    // Añadir descripción\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Descripción', 20, 100);\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    \n    // Dividir descripción en líneas para evitar que se salga de la página\n    const descripcionLineas = doc.splitTextToSize(informe.descripcion || '', 170);\n    doc.text(descripcionLineas, 20, 110);\n    \n    // Añadir contenido principal\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Contenido', 20, 130 + (descripcionLineas.length * 5));\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    \n    // Dividir contenido en líneas\n    const contenidoLineas = doc.splitTextToSize(informe.contenido || '', 170);\n    doc.text(contenidoLineas, 20, 140 + (descripcionLineas.length * 5));\n    \n    // Añadir pie de página\n    const totalPaginas = doc.internal.getNumberOfPages();\n    \n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n      doc.setFontSize(10);\n      doc.setTextColor(150, 150, 150);\n      \n      // Pie de página con fecha y número de página\n      const fechaActual = new Date().toLocaleDateString('es-ES');\n      doc.text(`AlhambraCRM - Generado el ${fechaActual}`, 20, 285);\n      doc.text(`Página ${i} de ${totalPaginas}`, 180, 285);\n    }\n    \n    // Guardar el PDF con el nombre del informe\n    doc.save(`Informe_${informe.titulo.replace(/\\s+/g, '_')}.pdf`);\n  } catch (error) {\n    console.error('Error al exportar informe a PDF:', error);\n    throw new Error('Error al generar el PDF del informe. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Utilidad para exportar lista de informes en formato PDF\n */\nexport const exportarListaInformesPDF = (informes, filtros = {}) => {\n  try {\n    console.log('Exportando lista de informes:', informes);\n    \n    // Validar que informes sea un array\n    if (!Array.isArray(informes)) {\n      throw new Error('La lista de informes no es válida');\n    }\n    \n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n    \n    // Configurar fuentes y colores\n    const colorPrimario = '#3498db';\n    \n    // Añadir encabezado con logo y título\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 30, 'F');\n    \n    // Título\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(22);\n    doc.text('AlhambraCRM', 105, 15, { align: 'center' });\n    \n    // Subtítulo\n    doc.setFontSize(14);\n    doc.text('Listado de Informes', 105, 25, { align: 'center' });\n    \n    // Información de filtros\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    \n    let textoFiltros = 'Todos los informes';\n    \n    if (filtros.tipo && filtros.tipo !== 'todos') {\n      textoFiltros = `Tipo: ${filtros.tipo}`;\n    }\n    \n    doc.text(`Filtros aplicados: ${textoFiltros}`, 20, 45);\n    doc.text(`Total de informes: ${informes.length}`, 20, 55);\n    doc.text(`Fecha de generación: ${new Date().toLocaleDateString('es-ES')}`, 20, 65);\n    \n    // Crear tabla con los informes\n    const columnas = [\n      { header: 'Título', dataKey: 'titulo' },\n      { header: 'Tipo', dataKey: 'tipo' },\n      { header: 'Autor', dataKey: 'autor' },\n      { header: 'Fecha', dataKey: 'fechaActualizacion' },\n      { header: 'Proyecto', dataKey: 'proyecto' }\n    ];\n    \n    const filas = informes.map(informe => ({\n      titulo: informe.titulo || '',\n      tipo: informe.tipo || '',\n      autor: informe.autor || '',\n      fechaActualizacion: formatearFecha(informe.fechaActualizacion),\n      proyecto: informe.proyecto || '-'\n    }));\n    \n    doc.autoTable({\n      startY: 75,\n      head: [columnas.map(col => col.header)],\n      body: filas.map(fila => columnas.map(col => fila[col.dataKey])),\n      theme: 'grid',\n      headStyles: {\n        fillColor: colorPrimario,\n        textColor: [255, 255, 255],\n        fontStyle: 'bold'\n      },\n      alternateRowStyles: {\n        fillColor: [240, 240, 240]\n      },\n      margin: { top: 75 }\n    });\n    \n    // Añadir pie de página\n    const totalPaginas = doc.internal.getNumberOfPages();\n    \n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n      doc.setFontSize(10);\n      doc.setTextColor(150, 150, 150);\n      \n      // Pie de página con fecha y número de página\n      const fechaActual = new Date().toLocaleDateString('es-ES');\n      doc.text(`AlhambraCRM - Generado el ${fechaActual}`, 20, 285);\n      doc.text(`Página ${i} de ${totalPaginas}`, 180, 285);\n    }\n    \n    // Guardar el PDF\n    doc.save('Listado_Informes.pdf');\n  } catch (error) {\n    console.error('Error al exportar lista de informes a PDF:', error);\n    throw new Error('Error al generar el PDF de la lista de informes. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Utilidad para exportar informes en formato Excel\n * En una implementación real, esto se haría con una biblioteca como xlsx\n * Por ahora, simplemente mostramos un mensaje de que esta funcionalidad está en desarrollo\n */\nexport const exportarInformeExcel = (informe) => {\n  alert('La exportación a Excel está en desarrollo. Estará disponible próximamente.');\n};\n\n/**\n * Formatear fecha para mostrar en el PDF\n */\nconst formatearFecha = (fechaStr) => {\n  if (!fechaStr) return '-';\n  \n  try {\n    const fecha = new Date(fechaStr);\n    if (isNaN(fecha.getTime())) return '-';\n    \n    return fecha.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return '-';\n  }\n};\n\nexport default {\n  exportarInformePDF,\n  exportarListaInformesPDF,\n  exportarInformeExcel\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}