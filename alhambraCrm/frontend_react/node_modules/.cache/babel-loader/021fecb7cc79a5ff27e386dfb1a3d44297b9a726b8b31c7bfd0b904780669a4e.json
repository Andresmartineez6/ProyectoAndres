{"ast":null,"code":"import jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\n/**\n * Utilidad para exportar informes en formato PDF\n */\nexport const exportarInformePDF = informe => {\n  try {\n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n\n    // Configurar fuentes y colores\n    const colorPrimario = '#3498db';\n    const colorSecundario = '#2ecc71';\n    const colorTexto = '#333333';\n    const colorFondo = '#f8f9fa';\n\n    // Añadir encabezado con logo y título\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 40, 'F');\n\n    // Título del informe\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(28);\n    doc.text('AlhambraCRM', 105, 20, {\n      align: 'center'\n    });\n\n    // Subtítulo\n    doc.setFontSize(16);\n    doc.text(`Informe: ${informe.titulo || 'Sin título'}`, 105, 32, {\n      align: 'center'\n    });\n\n    // Añadir una franja decorativa\n    doc.setFillColor(colorSecundario);\n    doc.rect(0, 40, 210, 5, 'F');\n\n    // Información del informe - Sección de metadatos\n    doc.setTextColor(colorTexto);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n\n    // Crear un recuadro para los metadatos\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 55, 180, 70, 3, 3, 'F');\n\n    // Metadatos del informe\n    const fechaCreacion = formatearFecha(informe.fechaCreacion);\n    const fechaActualizacion = formatearFecha(informe.fechaActualizacion);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Fecha de creación:', 25, 70);\n    doc.setFont('helvetica', 'normal');\n    doc.text(fechaCreacion, 90, 70);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Última actualización:', 25, 85);\n    doc.setFont('helvetica', 'normal');\n    doc.text(fechaActualizacion, 90, 85);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Autor:', 25, 100);\n    doc.setFont('helvetica', 'normal');\n    doc.text(informe.autor || 'No especificado', 90, 100);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Tipo:', 25, 115);\n    doc.setFont('helvetica', 'normal');\n    doc.text(informe.tipo || 'No especificado', 90, 115);\n    if (informe.proyecto) {\n      doc.setFont('helvetica', 'bold');\n      doc.text('Proyecto:', 25, 130);\n      doc.setFont('helvetica', 'normal');\n      doc.text(informe.proyecto, 90, 130);\n    }\n\n    // Añadir descripción con un recuadro\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 140, 180, 50, 3, 3, 'F');\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(colorPrimario);\n    doc.text('Descripción', 25, 155);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.setTextColor(colorTexto);\n\n    // Dividir descripción en líneas para evitar que se salga de la página\n    const descripcionLineas = doc.splitTextToSize(informe.descripcion || 'No hay descripción disponible', 160);\n    doc.text(descripcionLineas, 25, 170);\n\n    // Añadir contenido principal con un recuadro\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 200, 180, 70, 3, 3, 'F');\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(colorPrimario);\n    doc.text('Contenido', 25, 215);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.setTextColor(colorTexto);\n\n    // Dividir contenido en líneas\n    const contenidoLineas = doc.splitTextToSize(informe.contenido || 'No hay contenido disponible', 160);\n    doc.text(contenidoLineas, 25, 230);\n\n    // Añadir pie de página\n    const totalPaginas = doc.internal.getNumberOfPages();\n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n\n      // Añadir una franja decorativa en el pie de página\n      doc.setFillColor(colorPrimario);\n      doc.rect(0, 280, 210, 17, 'F');\n      doc.setFontSize(10);\n      doc.setTextColor(255, 255, 255);\n      doc.setFont('helvetica', 'normal');\n\n      // Pie de página con fecha y número de página\n      const fechaActual = new Date().toLocaleDateString('es-ES', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      doc.text(`AlhambraCRM - Documento generado el ${fechaActual}`, 105, 290, {\n        align: 'center'\n      });\n      doc.text(`Página ${i} de ${totalPaginas}`, 180, 290);\n    }\n\n    // Guardar el PDF con el nombre del informe\n    doc.save(`Informe_${informe.titulo.replace(/\\s+/g, '_')}.pdf`);\n    return true;\n  } catch (error) {\n    console.error('Error al exportar informe a PDF:', error);\n    throw new Error('Error al generar el PDF del informe. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Utilidad para exportar lista de informes en formato PDF\n */\nexport const exportarListaInformesPDF = (informes, filtros = {}) => {\n  try {\n    console.log('Exportando lista de informes:', informes);\n\n    // Validar que informes sea un array\n    if (!Array.isArray(informes)) {\n      throw new Error('La lista de informes no es válida');\n    }\n\n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n\n    // Configurar fuentes y colores\n    const colorPrimario = '#3498db';\n    const colorSecundario = '#2ecc71';\n    const colorTexto = '#333333';\n    const colorFondo = '#f8f9fa';\n\n    // Añadir encabezado con logo y título\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 40, 'F');\n\n    // Título\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(28);\n    doc.text('AlhambraCRM', 105, 20, {\n      align: 'center'\n    });\n\n    // Subtítulo\n    doc.setFontSize(16);\n    doc.text('Listado de Informes', 105, 32, {\n      align: 'center'\n    });\n\n    // Añadir una franja decorativa\n    doc.setFillColor(colorSecundario);\n    doc.rect(0, 40, 210, 5, 'F');\n\n    // Información de filtros - Sección de metadatos\n    doc.setTextColor(colorTexto);\n    doc.setFontSize(12);\n\n    // Crear un recuadro para los metadatos\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 55, 180, 50, 3, 3, 'F');\n\n    // Información de filtros\n    let textoFiltros = 'Todos los informes';\n    if (filtros.tipo && filtros.tipo !== 'todos') {\n      textoFiltros = `Tipo: ${filtros.tipo}`;\n    }\n    doc.setFont('helvetica', 'bold');\n    doc.text('Filtros aplicados:', 25, 70);\n    doc.setFont('helvetica', 'normal');\n    doc.text(textoFiltros, 105, 70);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Total de informes:', 25, 85);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${informes.length}`, 105, 85);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Fecha de generación:', 25, 100);\n    doc.setFont('helvetica', 'normal');\n    const fechaGeneracion = new Date().toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    doc.text(fechaGeneracion, 105, 100);\n\n    // Título de la tabla\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(colorPrimario);\n    doc.text('Detalle de Informes', 105, 120, {\n      align: 'center'\n    });\n\n    // Crear tabla con los informes\n    const columnas = [{\n      header: 'Título',\n      dataKey: 'titulo'\n    }, {\n      header: 'Tipo',\n      dataKey: 'tipo'\n    }, {\n      header: 'Autor',\n      dataKey: 'autor'\n    }, {\n      header: 'Fecha',\n      dataKey: 'fechaActualizacion'\n    }, {\n      header: 'Proyecto',\n      dataKey: 'proyecto'\n    }];\n    const filas = informes.map(informe => ({\n      titulo: informe.titulo || 'Sin título',\n      tipo: informe.tipo || 'Sin tipo',\n      autor: informe.autor || 'Sin autor',\n      fechaActualizacion: formatearFecha(informe.fechaActualizacion),\n      proyecto: informe.proyecto || '-'\n    }));\n    doc.autoTable({\n      startY: 130,\n      head: [columnas.map(col => col.header)],\n      body: filas.map(fila => columnas.map(col => fila[col.dataKey])),\n      theme: 'grid',\n      headStyles: {\n        fillColor: colorPrimario,\n        textColor: [255, 255, 255],\n        fontStyle: 'bold',\n        halign: 'center'\n      },\n      alternateRowStyles: {\n        fillColor: [240, 240, 240]\n      },\n      columnStyles: {\n        0: {\n          cellWidth: 50\n        },\n        1: {\n          cellWidth: 30,\n          halign: 'center'\n        },\n        2: {\n          cellWidth: 40\n        },\n        3: {\n          cellWidth: 30,\n          halign: 'center'\n        },\n        4: {\n          cellWidth: 40\n        }\n      },\n      margin: {\n        top: 130,\n        right: 15,\n        bottom: 30,\n        left: 15\n      },\n      didDrawPage: data => {\n        // Añadir encabezado en cada página\n        if (data.pageNumber > 1) {\n          doc.setFillColor(colorPrimario);\n          doc.rect(0, 0, 210, 20, 'F');\n          doc.setFont('helvetica', 'bold');\n          doc.setTextColor(255, 255, 255);\n          doc.setFontSize(14);\n          doc.text('AlhambraCRM - Listado de Informes', 105, 15, {\n            align: 'center'\n          });\n        }\n      }\n    });\n\n    // Añadir resumen estadístico si hay informes\n    if (informes.length > 0) {\n      // Obtener la posición Y después de la tabla\n      const finalY = doc.autoTable.previous.finalY + 20;\n\n      // Verificar si hay espacio suficiente en la página actual\n      if (finalY + 60 < 280) {\n        // Añadir resumen estadístico\n        doc.setFillColor(colorFondo);\n        doc.roundedRect(15, finalY, 180, 50, 3, 3, 'F');\n        doc.setFontSize(14);\n        doc.setFont('helvetica', 'bold');\n        doc.setTextColor(colorPrimario);\n        doc.text('Resumen Estadístico', 105, finalY + 15, {\n          align: 'center'\n        });\n\n        // Contar informes por tipo\n        const tiposInforme = {};\n        informes.forEach(informe => {\n          const tipo = informe.tipo || 'Sin tipo';\n          tiposInforme[tipo] = (tiposInforme[tipo] || 0) + 1;\n        });\n\n        // Mostrar estadísticas\n        doc.setFontSize(12);\n        doc.setFont('helvetica', 'normal');\n        doc.setTextColor(colorTexto);\n        let yPos = finalY + 30;\n        doc.text('Distribución por tipo de informe:', 25, yPos);\n        Object.entries(tiposInforme).forEach(([tipo, cantidad], index) => {\n          yPos += 10;\n          doc.text(`- ${tipo}: ${cantidad} informe(s) (${Math.round(cantidad / informes.length * 100)}%)`, 35, yPos);\n        });\n      }\n    }\n\n    // Añadir pie de página\n    const totalPaginas = doc.internal.getNumberOfPages();\n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n\n      // Añadir una franja decorativa en el pie de página\n      doc.setFillColor(colorPrimario);\n      doc.rect(0, 280, 210, 17, 'F');\n      doc.setFontSize(10);\n      doc.setTextColor(255, 255, 255);\n      doc.setFont('helvetica', 'normal');\n\n      // Pie de página con fecha y número de página\n      doc.text(`AlhambraCRM - Documento generado el ${fechaGeneracion}`, 105, 290, {\n        align: 'center'\n      });\n      doc.text(`Página ${i} de ${totalPaginas}`, 180, 290);\n    }\n\n    // Guardar el PDF\n    doc.save('Listado_Informes.pdf');\n    return true;\n  } catch (error) {\n    console.error('Error al exportar lista de informes a PDF:', error);\n    throw new Error('Error al generar el PDF de la lista de informes. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Utilidad para exportar informes en formato Excel\n * En una implementación real, esto se haría con una biblioteca como xlsx\n * Por ahora, simplemente mostramos un mensaje de que esta funcionalidad está en desarrollo\n */\nexport const exportarInformeExcel = informe => {\n  alert('La exportación a Excel está en desarrollo. Estará disponible próximamente.');\n};\n\n/**\n * Formatear fecha para mostrar en el PDF\n */\nconst formatearFecha = fechaStr => {\n  if (!fechaStr) return '-';\n  try {\n    const fecha = new Date(fechaStr);\n    if (isNaN(fecha.getTime())) return '-';\n    return fecha.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return '-';\n  }\n};\nexport default {\n  exportarInformePDF,\n  exportarListaInformesPDF,\n  exportarInformeExcel\n};","map":{"version":3,"names":["jsPDF","exportarInformePDF","informe","doc","colorPrimario","colorSecundario","colorTexto","colorFondo","setFillColor","rect","setFont","setTextColor","setFontSize","text","align","titulo","roundedRect","fechaCreacion","formatearFecha","fechaActualizacion","autor","tipo","proyecto","descripcionLineas","splitTextToSize","descripcion","contenidoLineas","contenido","totalPaginas","internal","getNumberOfPages","i","setPage","fechaActual","Date","toLocaleDateString","day","month","year","hour","minute","save","replace","error","console","Error","exportarListaInformesPDF","informes","filtros","log","Array","isArray","textoFiltros","length","fechaGeneracion","columnas","header","dataKey","filas","map","autoTable","startY","head","col","body","fila","theme","headStyles","fillColor","textColor","fontStyle","halign","alternateRowStyles","columnStyles","cellWidth","margin","top","right","bottom","left","didDrawPage","data","pageNumber","finalY","previous","tiposInforme","forEach","yPos","Object","entries","cantidad","index","Math","round","exportarInformeExcel","alert","fechaStr","fecha","isNaN","getTime"],"sources":["C:/Users/andre/Desktop/ProyectoAndres/alhambraCrm/frontend_react/src/utilidades/exportarPDF.js"],"sourcesContent":["import jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\n/**\n * Utilidad para exportar informes en formato PDF\n */\nexport const exportarInformePDF = (informe) => {\n  try {\n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n    \n    // Configurar fuentes y colores\n    const colorPrimario = '#3498db';\n    const colorSecundario = '#2ecc71';\n    const colorTexto = '#333333';\n    const colorFondo = '#f8f9fa';\n    \n    // Añadir encabezado con logo y título\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 40, 'F');\n    \n    // Título del informe\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(28);\n    doc.text('AlhambraCRM', 105, 20, { align: 'center' });\n    \n    // Subtítulo\n    doc.setFontSize(16);\n    doc.text(`Informe: ${informe.titulo || 'Sin título'}`, 105, 32, { align: 'center' });\n    \n    // Añadir una franja decorativa\n    doc.setFillColor(colorSecundario);\n    doc.rect(0, 40, 210, 5, 'F');\n    \n    // Información del informe - Sección de metadatos\n    doc.setTextColor(colorTexto);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    \n    // Crear un recuadro para los metadatos\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 55, 180, 70, 3, 3, 'F');\n    \n    // Metadatos del informe\n    const fechaCreacion = formatearFecha(informe.fechaCreacion);\n    const fechaActualizacion = formatearFecha(informe.fechaActualizacion);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Fecha de creación:', 25, 70);\n    doc.setFont('helvetica', 'normal');\n    doc.text(fechaCreacion, 90, 70);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Última actualización:', 25, 85);\n    doc.setFont('helvetica', 'normal');\n    doc.text(fechaActualizacion, 90, 85);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Autor:', 25, 100);\n    doc.setFont('helvetica', 'normal');\n    doc.text(informe.autor || 'No especificado', 90, 100);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Tipo:', 25, 115);\n    doc.setFont('helvetica', 'normal');\n    doc.text(informe.tipo || 'No especificado', 90, 115);\n    \n    if (informe.proyecto) {\n      doc.setFont('helvetica', 'bold');\n      doc.text('Proyecto:', 25, 130);\n      doc.setFont('helvetica', 'normal');\n      doc.text(informe.proyecto, 90, 130);\n    }\n    \n    // Añadir descripción con un recuadro\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 140, 180, 50, 3, 3, 'F');\n    \n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(colorPrimario);\n    doc.text('Descripción', 25, 155);\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.setTextColor(colorTexto);\n    \n    // Dividir descripción en líneas para evitar que se salga de la página\n    const descripcionLineas = doc.splitTextToSize(informe.descripcion || 'No hay descripción disponible', 160);\n    doc.text(descripcionLineas, 25, 170);\n    \n    // Añadir contenido principal con un recuadro\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 200, 180, 70, 3, 3, 'F');\n    \n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(colorPrimario);\n    doc.text('Contenido', 25, 215);\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.setTextColor(colorTexto);\n    \n    // Dividir contenido en líneas\n    const contenidoLineas = doc.splitTextToSize(informe.contenido || 'No hay contenido disponible', 160);\n    doc.text(contenidoLineas, 25, 230);\n    \n    // Añadir pie de página\n    const totalPaginas = doc.internal.getNumberOfPages();\n    \n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n      \n      // Añadir una franja decorativa en el pie de página\n      doc.setFillColor(colorPrimario);\n      doc.rect(0, 280, 210, 17, 'F');\n      \n      doc.setFontSize(10);\n      doc.setTextColor(255, 255, 255);\n      doc.setFont('helvetica', 'normal');\n      \n      // Pie de página con fecha y número de página\n      const fechaActual = new Date().toLocaleDateString('es-ES', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      \n      doc.text(`AlhambraCRM - Documento generado el ${fechaActual}`, 105, 290, { align: 'center' });\n      doc.text(`Página ${i} de ${totalPaginas}`, 180, 290);\n    }\n    \n    // Guardar el PDF con el nombre del informe\n    doc.save(`Informe_${informe.titulo.replace(/\\s+/g, '_')}.pdf`);\n    \n    return true;\n  } catch (error) {\n    console.error('Error al exportar informe a PDF:', error);\n    throw new Error('Error al generar el PDF del informe. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Utilidad para exportar lista de informes en formato PDF\n */\nexport const exportarListaInformesPDF = (informes, filtros = {}) => {\n  try {\n    console.log('Exportando lista de informes:', informes);\n    \n    // Validar que informes sea un array\n    if (!Array.isArray(informes)) {\n      throw new Error('La lista de informes no es válida');\n    }\n    \n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n    \n    // Configurar fuentes y colores\n    const colorPrimario = '#3498db';\n    const colorSecundario = '#2ecc71';\n    const colorTexto = '#333333';\n    const colorFondo = '#f8f9fa';\n    \n    // Añadir encabezado con logo y título\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 40, 'F');\n    \n    // Título\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(28);\n    doc.text('AlhambraCRM', 105, 20, { align: 'center' });\n    \n    // Subtítulo\n    doc.setFontSize(16);\n    doc.text('Listado de Informes', 105, 32, { align: 'center' });\n    \n    // Añadir una franja decorativa\n    doc.setFillColor(colorSecundario);\n    doc.rect(0, 40, 210, 5, 'F');\n    \n    // Información de filtros - Sección de metadatos\n    doc.setTextColor(colorTexto);\n    doc.setFontSize(12);\n    \n    // Crear un recuadro para los metadatos\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 55, 180, 50, 3, 3, 'F');\n    \n    // Información de filtros\n    let textoFiltros = 'Todos los informes';\n    \n    if (filtros.tipo && filtros.tipo !== 'todos') {\n      textoFiltros = `Tipo: ${filtros.tipo}`;\n    }\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Filtros aplicados:', 25, 70);\n    doc.setFont('helvetica', 'normal');\n    doc.text(textoFiltros, 105, 70);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Total de informes:', 25, 85);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${informes.length}`, 105, 85);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Fecha de generación:', 25, 100);\n    doc.setFont('helvetica', 'normal');\n    \n    const fechaGeneracion = new Date().toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    \n    doc.text(fechaGeneracion, 105, 100);\n    \n    // Título de la tabla\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(colorPrimario);\n    doc.text('Detalle de Informes', 105, 120, { align: 'center' });\n    \n    // Crear tabla con los informes\n    const columnas = [\n      { header: 'Título', dataKey: 'titulo' },\n      { header: 'Tipo', dataKey: 'tipo' },\n      { header: 'Autor', dataKey: 'autor' },\n      { header: 'Fecha', dataKey: 'fechaActualizacion' },\n      { header: 'Proyecto', dataKey: 'proyecto' }\n    ];\n    \n    const filas = informes.map(informe => ({\n      titulo: informe.titulo || 'Sin título',\n      tipo: informe.tipo || 'Sin tipo',\n      autor: informe.autor || 'Sin autor',\n      fechaActualizacion: formatearFecha(informe.fechaActualizacion),\n      proyecto: informe.proyecto || '-'\n    }));\n    \n    doc.autoTable({\n      startY: 130,\n      head: [columnas.map(col => col.header)],\n      body: filas.map(fila => columnas.map(col => fila[col.dataKey])),\n      theme: 'grid',\n      headStyles: {\n        fillColor: colorPrimario,\n        textColor: [255, 255, 255],\n        fontStyle: 'bold',\n        halign: 'center'\n      },\n      alternateRowStyles: {\n        fillColor: [240, 240, 240]\n      },\n      columnStyles: {\n        0: { cellWidth: 50 },\n        1: { cellWidth: 30, halign: 'center' },\n        2: { cellWidth: 40 },\n        3: { cellWidth: 30, halign: 'center' },\n        4: { cellWidth: 40 }\n      },\n      margin: { top: 130, right: 15, bottom: 30, left: 15 },\n      didDrawPage: (data) => {\n        // Añadir encabezado en cada página\n        if (data.pageNumber > 1) {\n          doc.setFillColor(colorPrimario);\n          doc.rect(0, 0, 210, 20, 'F');\n          \n          doc.setFont('helvetica', 'bold');\n          doc.setTextColor(255, 255, 255);\n          doc.setFontSize(14);\n          doc.text('AlhambraCRM - Listado de Informes', 105, 15, { align: 'center' });\n        }\n      }\n    });\n    \n    // Añadir resumen estadístico si hay informes\n    if (informes.length > 0) {\n      // Obtener la posición Y después de la tabla\n      const finalY = doc.autoTable.previous.finalY + 20;\n      \n      // Verificar si hay espacio suficiente en la página actual\n      if (finalY + 60 < 280) {\n        // Añadir resumen estadístico\n        doc.setFillColor(colorFondo);\n        doc.roundedRect(15, finalY, 180, 50, 3, 3, 'F');\n        \n        doc.setFontSize(14);\n        doc.setFont('helvetica', 'bold');\n        doc.setTextColor(colorPrimario);\n        doc.text('Resumen Estadístico', 105, finalY + 15, { align: 'center' });\n        \n        // Contar informes por tipo\n        const tiposInforme = {};\n        informes.forEach(informe => {\n          const tipo = informe.tipo || 'Sin tipo';\n          tiposInforme[tipo] = (tiposInforme[tipo] || 0) + 1;\n        });\n        \n        // Mostrar estadísticas\n        doc.setFontSize(12);\n        doc.setFont('helvetica', 'normal');\n        doc.setTextColor(colorTexto);\n        \n        let yPos = finalY + 30;\n        doc.text('Distribución por tipo de informe:', 25, yPos);\n        \n        Object.entries(tiposInforme).forEach(([tipo, cantidad], index) => {\n          yPos += 10;\n          doc.text(`- ${tipo}: ${cantidad} informe(s) (${Math.round(cantidad / informes.length * 100)}%)`, 35, yPos);\n        });\n      }\n    }\n    \n    // Añadir pie de página\n    const totalPaginas = doc.internal.getNumberOfPages();\n    \n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n      \n      // Añadir una franja decorativa en el pie de página\n      doc.setFillColor(colorPrimario);\n      doc.rect(0, 280, 210, 17, 'F');\n      \n      doc.setFontSize(10);\n      doc.setTextColor(255, 255, 255);\n      doc.setFont('helvetica', 'normal');\n      \n      // Pie de página con fecha y número de página\n      doc.text(`AlhambraCRM - Documento generado el ${fechaGeneracion}`, 105, 290, { align: 'center' });\n      doc.text(`Página ${i} de ${totalPaginas}`, 180, 290);\n    }\n    \n    // Guardar el PDF\n    doc.save('Listado_Informes.pdf');\n    \n    return true;\n  } catch (error) {\n    console.error('Error al exportar lista de informes a PDF:', error);\n    throw new Error('Error al generar el PDF de la lista de informes. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Utilidad para exportar informes en formato Excel\n * En una implementación real, esto se haría con una biblioteca como xlsx\n * Por ahora, simplemente mostramos un mensaje de que esta funcionalidad está en desarrollo\n */\nexport const exportarInformeExcel = (informe) => {\n  alert('La exportación a Excel está en desarrollo. Estará disponible próximamente.');\n};\n\n/**\n * Formatear fecha para mostrar en el PDF\n */\nconst formatearFecha = (fechaStr) => {\n  if (!fechaStr) return '-';\n  \n  try {\n    const fecha = new Date(fechaStr);\n    if (isNaN(fecha.getTime())) return '-';\n    \n    return fecha.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return '-';\n  }\n};\n\nexport default {\n  exportarInformePDF,\n  exportarListaInformesPDF,\n  exportarInformeExcel\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}