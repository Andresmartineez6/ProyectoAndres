{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\ProyectoAndres\\\\alhambraCrm\\\\frontend_react\\\\src\\\\contexto\\\\ContextoAutenticacion.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { servicioAutenticacion } from '../servicios/api';\n\n// Crear el contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContextoAutenticacion = /*#__PURE__*/createContext();\nexport const ProveedorAutenticacion = ({\n  children\n}) => {\n  _s();\n  const [usuario, setUsuario] = useState(null);\n  const [cargando, setCargando] = useState(true);\n  useEffect(() => {\n    // Comprobar si hay un usuario en localStorage\n    const usuarioActual = servicioAutenticacion.obtenerUsuarioActual();\n    if (usuarioActual) {\n      setUsuario(usuarioActual);\n    }\n    setCargando(false);\n  }, []);\n\n  // Función para iniciar sesión\n  const iniciarSesion = async (datosUsuario, callback) => {\n    try {\n      // En un entorno real, esto se conectaría con el backend\n      // Por ahora, simulamos un inicio de sesión exitoso\n      setCargando(true);\n\n      // Simulación de conexión con el backend\n      const usuarioAutenticado = {\n        id: 1,\n        nombre: 'Usuario',\n        apellidos: 'Demo',\n        email: datosUsuario.email,\n        rol: datosUsuario.email.includes('admin') ? 'admin' : 'cliente'\n      };\n\n      // En un entorno real, esto sería:\n      // const respuesta = await servicioAutenticacion.iniciarSesion(datosUsuario);\n      // const usuarioAutenticado = respuesta.usuario;\n\n      setUsuario(usuarioAutenticado);\n      localStorage.setItem('usuario', JSON.stringify(usuarioAutenticado));\n      setCargando(false);\n      if (callback) callback();\n    } catch (error) {\n      console.error('Error al iniciar sesión:', error);\n      setCargando(false);\n      throw error;\n    }\n  };\n\n  // Función para registrar un nuevo usuario\n  const registrarUsuario = async (datosUsuario, callback) => {\n    try {\n      // En un entorno real, esto se conectaría con el backend\n      // Por ahora, simulamos un registro exitoso\n      setCargando(true);\n\n      // Generamos un ID único para el nuevo usuario\n      const nuevoId = Date.now();\n      const nuevoUsuario = {\n        id: nuevoId,\n        nombre: datosUsuario.nombre,\n        apellidos: datosUsuario.apellidos,\n        email: datosUsuario.email,\n        telefono: datosUsuario.telefono || '',\n        empresa: datosUsuario.empresa || '',\n        rol: 'cliente' // Por defecto, todos los usuarios nuevos son clientes\n      };\n\n      // En un entorno real, esto sería:\n      // const respuesta = await servicioAutenticacion.registrar(datosUsuario);\n      // const nuevoUsuario = respuesta.usuario;\n\n      // Guardamos el usuario en el estado y en localStorage\n      setUsuario(nuevoUsuario);\n      localStorage.setItem('usuario', JSON.stringify(nuevoUsuario));\n      setCargando(false);\n\n      // En un caso real, aquí se enviarían los datos al backend\n      console.log('Nuevo usuario registrado:', nuevoUsuario);\n      if (callback) callback();\n    } catch (error) {\n      console.error('Error al registrar usuario:', error);\n      setCargando(false);\n      throw error;\n    }\n  };\n\n  // Función para actualizar datos del usuario\n  const actualizarUsuario = async (datosUsuario, callback) => {\n    try {\n      setCargando(true);\n\n      // En un entorno real, esto se conectaría con el backend\n      // const respuesta = await servicioUsuarios.actualizar(usuario.id, datosUsuario);\n      // const usuarioActualizado = respuesta.data;\n\n      // Simulación de actualización\n      const usuarioActualizado = {\n        ...usuario,\n        ...datosUsuario\n      };\n      setUsuario(usuarioActualizado);\n      localStorage.setItem('usuario', JSON.stringify(usuarioActualizado));\n      setCargando(false);\n      if (callback) callback();\n      return usuarioActualizado;\n    } catch (error) {\n      console.error('Error al actualizar usuario:', error);\n      setCargando(false);\n      throw error;\n    }\n  };\n\n  // Función para cerrar sesión\n  const cerrarSesion = callback => {\n    // En un entorno real, esto sería:\n    // servicioAutenticacion.cerrarSesion();\n\n    setUsuario(null);\n    localStorage.removeItem('usuario');\n    if (callback) callback();\n  };\n\n  // Verificar si el usuario está autenticado\n  const estaAutenticado = () => {\n    return !!usuario;\n  };\n\n  // Verificar si el usuario es administrador\n  const esAdmin = () => {\n    return usuario && usuario.rol === 'admin';\n  };\n\n  // Valores que se proporcionarán a través del contexto\n  const valor = {\n    usuario,\n    cargando,\n    iniciarSesion,\n    registrarUsuario,\n    actualizarUsuario,\n    cerrarSesion,\n    estaAutenticado,\n    esAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(ContextoAutenticacion.Provider, {\n    value: valor,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(ProveedorAutenticacion, \"S8/JCBTkVpYKJ/1lvIrTttILOk8=\");\n_c = ProveedorAutenticacion;\nvar _c;\n$RefreshReg$(_c, \"ProveedorAutenticacion\");","map":{"version":3,"names":["React","createContext","useState","useEffect","servicioAutenticacion","jsxDEV","_jsxDEV","ContextoAutenticacion","ProveedorAutenticacion","children","_s","usuario","setUsuario","cargando","setCargando","usuarioActual","obtenerUsuarioActual","iniciarSesion","datosUsuario","callback","usuarioAutenticado","id","nombre","apellidos","email","rol","includes","localStorage","setItem","JSON","stringify","error","console","registrarUsuario","nuevoId","Date","now","nuevoUsuario","telefono","empresa","log","actualizarUsuario","usuarioActualizado","cerrarSesion","removeItem","estaAutenticado","esAdmin","valor","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/andre/Desktop/ProyectoAndres/alhambraCrm/frontend_react/src/contexto/ContextoAutenticacion.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { servicioAutenticacion } from '../servicios/api';\n\n// Crear el contexto\nexport const ContextoAutenticacion = createContext();\n\nexport const ProveedorAutenticacion = ({ children }) => {\n  const [usuario, setUsuario] = useState(null);\n  const [cargando, setCargando] = useState(true);\n  \n  useEffect(() => {\n    // Comprobar si hay un usuario en localStorage\n    const usuarioActual = servicioAutenticacion.obtenerUsuarioActual();\n    if (usuarioActual) {\n      setUsuario(usuarioActual);\n    }\n    setCargando(false);\n  }, []);\n  \n  // Función para iniciar sesión\n  const iniciarSesion = async (datosUsuario, callback) => {\n    try {\n      // En un entorno real, esto se conectaría con el backend\n      // Por ahora, simulamos un inicio de sesión exitoso\n      setCargando(true);\n      \n      // Simulación de conexión con el backend\n      const usuarioAutenticado = {\n        id: 1,\n        nombre: 'Usuario',\n        apellidos: 'Demo',\n        email: datosUsuario.email,\n        rol: datosUsuario.email.includes('admin') ? 'admin' : 'cliente'\n      };\n      \n      // En un entorno real, esto sería:\n      // const respuesta = await servicioAutenticacion.iniciarSesion(datosUsuario);\n      // const usuarioAutenticado = respuesta.usuario;\n      \n      setUsuario(usuarioAutenticado);\n      localStorage.setItem('usuario', JSON.stringify(usuarioAutenticado));\n      \n      setCargando(false);\n      \n      if (callback) callback();\n    } catch (error) {\n      console.error('Error al iniciar sesión:', error);\n      setCargando(false);\n      throw error;\n    }\n  };\n  \n  // Función para registrar un nuevo usuario\n  const registrarUsuario = async (datosUsuario, callback) => {\n    try {\n      // En un entorno real, esto se conectaría con el backend\n      // Por ahora, simulamos un registro exitoso\n      setCargando(true);\n      \n      // Generamos un ID único para el nuevo usuario\n      const nuevoId = Date.now();\n      \n      const nuevoUsuario = {\n        id: nuevoId,\n        nombre: datosUsuario.nombre,\n        apellidos: datosUsuario.apellidos,\n        email: datosUsuario.email,\n        telefono: datosUsuario.telefono || '',\n        empresa: datosUsuario.empresa || '',\n        rol: 'cliente' // Por defecto, todos los usuarios nuevos son clientes\n      };\n      \n      // En un entorno real, esto sería:\n      // const respuesta = await servicioAutenticacion.registrar(datosUsuario);\n      // const nuevoUsuario = respuesta.usuario;\n      \n      // Guardamos el usuario en el estado y en localStorage\n      setUsuario(nuevoUsuario);\n      localStorage.setItem('usuario', JSON.stringify(nuevoUsuario));\n      \n      setCargando(false);\n      \n      // En un caso real, aquí se enviarían los datos al backend\n      console.log('Nuevo usuario registrado:', nuevoUsuario);\n      \n      if (callback) callback();\n    } catch (error) {\n      console.error('Error al registrar usuario:', error);\n      setCargando(false);\n      throw error;\n    }\n  };\n  \n  // Función para actualizar datos del usuario\n  const actualizarUsuario = async (datosUsuario, callback) => {\n    try {\n      setCargando(true);\n      \n      // En un entorno real, esto se conectaría con el backend\n      // const respuesta = await servicioUsuarios.actualizar(usuario.id, datosUsuario);\n      // const usuarioActualizado = respuesta.data;\n      \n      // Simulación de actualización\n      const usuarioActualizado = {\n        ...usuario,\n        ...datosUsuario\n      };\n      \n      setUsuario(usuarioActualizado);\n      localStorage.setItem('usuario', JSON.stringify(usuarioActualizado));\n      \n      setCargando(false);\n      \n      if (callback) callback();\n      \n      return usuarioActualizado;\n    } catch (error) {\n      console.error('Error al actualizar usuario:', error);\n      setCargando(false);\n      throw error;\n    }\n  };\n  \n  // Función para cerrar sesión\n  const cerrarSesion = (callback) => {\n    // En un entorno real, esto sería:\n    // servicioAutenticacion.cerrarSesion();\n    \n    setUsuario(null);\n    localStorage.removeItem('usuario');\n    \n    if (callback) callback();\n  };\n  \n  // Verificar si el usuario está autenticado\n  const estaAutenticado = () => {\n    return !!usuario;\n  };\n  \n  // Verificar si el usuario es administrador\n  const esAdmin = () => {\n    return usuario && usuario.rol === 'admin';\n  };\n  \n  // Valores que se proporcionarán a través del contexto\n  const valor = {\n    usuario,\n    cargando,\n    iniciarSesion,\n    registrarUsuario,\n    actualizarUsuario,\n    cerrarSesion,\n    estaAutenticado,\n    esAdmin\n  };\n  \n  return (\n    <ContextoAutenticacion.Provider value={valor}>\n      {children}\n    </ContextoAutenticacion.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}