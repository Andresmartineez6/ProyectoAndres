{"ast":null,"code":"import axios from 'axios';\n\n// URL base de la API\nconst API_URL = 'http://localhost/alhambraCrm/backend/api';\n\n// Modo de desarrollo (usar datos de ejemplo)\nconst MODO_DESARROLLO = true;\n\n// Configuración de axios con token de autenticación\nconst configurarAxios = () => {\n  const token = localStorage.getItem('token');\n  return axios.create({\n    baseURL: API_URL,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    }\n  });\n};\n\n// Datos de ejemplo para desarrollo\nconst datosMock = {\n  clientes: [{\n    id: 1,\n    nombre: 'Empresa ABC',\n    email: 'contacto@abc.com',\n    telefono: '612345678',\n    direccion: 'Calle Principal 123',\n    ciudad: 'Granada',\n    estado: 'Activo',\n    fechaRegistro: '2025-01-15'\n  }, {\n    id: 2,\n    nombre: 'Corporación XYZ',\n    email: 'info@xyz.com',\n    telefono: '687654321',\n    direccion: 'Avenida Central 456',\n    ciudad: 'Sevilla',\n    estado: 'Activo',\n    fechaRegistro: '2025-02-20'\n  }, {\n    id: 3,\n    nombre: 'Industrias 123',\n    email: 'ventas@123.com',\n    telefono: '654123789',\n    direccion: 'Plaza Mayor 789',\n    ciudad: 'Madrid',\n    estado: 'Pendiente',\n    fechaRegistro: '2025-03-10'\n  }, {\n    id: 4,\n    nombre: 'Servicios Pro',\n    email: 'admin@pro.com',\n    telefono: '678912345',\n    direccion: 'Calle Secundaria 321',\n    ciudad: 'Barcelona',\n    estado: 'Activo',\n    fechaRegistro: '2025-03-25'\n  }],\n  trabajadores: [{\n    id: 1,\n    nombre: 'Ana Martínez',\n    email: 'ana@alhambra.com',\n    telefono: '612345678',\n    departamento: 'Ventas',\n    cargo: 'Gerente de Ventas',\n    estado: 'Activo',\n    fechaContratacion: '2024-01-10'\n  }, {\n    id: 2,\n    nombre: 'Luis García',\n    email: 'luis@alhambra.com',\n    telefono: '687654321',\n    departamento: 'Soporte',\n    cargo: 'Técnico de Soporte',\n    estado: 'Activo',\n    fechaContratacion: '2024-02-15'\n  }, {\n    id: 3,\n    nombre: 'Elena Ruiz',\n    email: 'elena@alhambra.com',\n    telefono: '654123789',\n    departamento: 'Desarrollo',\n    cargo: 'Desarrolladora Senior',\n    estado: 'Inactivo',\n    fechaContratacion: '2024-03-05'\n  }, {\n    id: 4,\n    nombre: 'Carlos Sánchez',\n    email: 'carlos@alhambra.com',\n    telefono: '678912345',\n    departamento: 'Marketing',\n    cargo: 'Especialista en Marketing',\n    estado: 'Activo',\n    fechaContratacion: '2024-03-20'\n  }],\n  proyectos: [{\n    id: 1,\n    nombre: 'Desarrollo de aplicación web',\n    descripcion: 'Desarrollo de una aplicación web para gestión de inventario',\n    fechaInicio: '2025-03-01',\n    fechaFin: '2025-06-30',\n    estado: 'En progreso',\n    presupuesto: 15000,\n    cliente: 'Empresa ABC',\n    responsable: 'Elena Ruiz',\n    progreso: 45\n  }, {\n    id: 2,\n    nombre: 'Rediseño de marca',\n    descripcion: 'Rediseño completo de la identidad corporativa',\n    fechaInicio: '2025-02-15',\n    fechaFin: '2025-04-15',\n    estado: 'Completado',\n    presupuesto: 8000,\n    cliente: 'Corporación XYZ',\n    responsable: 'Carlos Sánchez',\n    progreso: 100\n  }, {\n    id: 3,\n    nombre: 'Campaña de marketing digital',\n    descripcion: 'Implementación de estrategia de marketing en redes sociales',\n    fechaInicio: '2025-04-01',\n    fechaFin: '2025-07-31',\n    estado: 'Pendiente',\n    presupuesto: 12000,\n    cliente: 'Industrias 123',\n    responsable: 'Ana Martínez',\n    progreso: 10\n  }],\n  informes: [{\n    id: 1,\n    titulo: 'Informe de ventas Q1 2025',\n    descripcion: 'Análisis detallado de las ventas del primer trimestre de 2025',\n    tipo: 'Ventas',\n    fechaCreacion: '2025-04-01',\n    fechaActualizacion: '2025-04-05',\n    autor: 'Ana Martínez',\n    proyecto: 'Desarrollo de aplicación web',\n    contenido: 'Este informe muestra un análisis detallado de las ventas del primer trimestre del año 2025. Se observa un incremento del 15% respecto al mismo período del año anterior.'\n  }, {\n    id: 2,\n    titulo: 'Informe financiero marzo 2025',\n    descripcion: 'Resumen financiero del mes de marzo de 2025',\n    tipo: 'Financiero',\n    fechaCreacion: '2025-04-02',\n    fechaActualizacion: '2025-04-02',\n    autor: 'Luis García',\n    proyecto: 'Rediseño de marca',\n    contenido: 'Este informe presenta el estado financiero de la empresa durante el mes de marzo de 2025. Se incluyen ingresos, gastos y balance general.'\n  }, {\n    id: 3,\n    titulo: 'Informe de progreso de proyecto',\n    descripcion: 'Estado actual del proyecto de desarrollo web',\n    tipo: 'Proyecto',\n    fechaCreacion: '2025-03-25',\n    fechaActualizacion: '2025-04-03',\n    autor: 'Elena Ruiz',\n    proyecto: 'Desarrollo de aplicación web',\n    contenido: 'Este informe detalla el avance del proyecto de desarrollo web. Se han completado las fases de diseño y se está avanzando en la implementación del backend.'\n  }],\n  tareas: [{\n    id: 1,\n    titulo: 'Diseñar interfaz de usuario',\n    descripcion: 'Crear wireframes y mockups para la aplicación',\n    fechaCreacion: '2025-03-05',\n    fechaVencimiento: '2025-03-15',\n    estado: 'Completada',\n    prioridad: 'Alta',\n    asignado: 'Elena Ruiz',\n    proyecto: 'Desarrollo de aplicación web'\n  }, {\n    id: 2,\n    titulo: 'Implementar backend',\n    descripcion: 'Desarrollar API RESTful para la aplicación',\n    fechaCreacion: '2025-03-16',\n    fechaVencimiento: '2025-04-15',\n    estado: 'En progreso',\n    prioridad: 'Alta',\n    asignado: 'Luis García',\n    proyecto: 'Desarrollo de aplicación web'\n  }, {\n    id: 3,\n    titulo: 'Crear logo',\n    descripcion: 'Diseñar nuevo logo corporativo',\n    fechaCreacion: '2025-02-20',\n    fechaVencimiento: '2025-03-10',\n    estado: 'Completada',\n    prioridad: 'Media',\n    asignado: 'Carlos Sánchez',\n    proyecto: 'Rediseño de marca'\n  }, {\n    id: 4,\n    titulo: 'Planificar campaña en redes sociales',\n    descripcion: 'Definir estrategia y calendario de publicaciones',\n    fechaCreacion: '2025-04-02',\n    fechaVencimiento: '2025-04-20',\n    estado: 'Pendiente',\n    prioridad: 'Media',\n    asignado: 'Ana Martínez',\n    proyecto: 'Campaña de marketing digital'\n  }]\n};\n\n// Servicios para tareas\nexport const servicioTareas = {\n  obtenerTodas: async (filtros = {}) => {\n    if (MODO_DESARROLLO) {\n      // Simular retraso de red\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Filtrar tareas según los criterios\n      let tareasFiltradas = [...datosMock.tareas];\n      if (filtros.estado) {\n        tareasFiltradas = tareasFiltradas.filter(tarea => tarea.estado === filtros.estado);\n      }\n      if (filtros.proyecto) {\n        tareasFiltradas = tareasFiltradas.filter(tarea => tarea.proyecto === filtros.proyecto);\n      }\n      return tareasFiltradas;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/tareas', {\n        params: filtros\n      });\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener tareas:', error);\n      throw error;\n    }\n  },\n  obtenerPorId: async id => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const tarea = datosMock.tareas.find(t => t.id === parseInt(id));\n      if (!tarea) throw new Error(`Tarea con ID ${id} no encontrada`);\n      return tarea;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/tareas/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al obtener tarea con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  crear: async datosTarea => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 700));\n      const nuevaTarea = {\n        ...datosTarea,\n        id: datosMock.tareas.length > 0 ? Math.max(...datosMock.tareas.map(t => t.id)) + 1 : 1,\n        fechaCreacion: new Date().toISOString().split('T')[0]\n      };\n      datosMock.tareas.push(nuevaTarea);\n      return nuevaTarea;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/tareas', datosTarea);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al crear tarea:', error);\n      throw error;\n    }\n  },\n  actualizar: async (id, datosTarea) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      const tarea = datosMock.tareas.find(t => t.id === parseInt(id));\n      if (!tarea) throw new Error(`Tarea con ID ${id} no encontrada`);\n      Object.assign(tarea, datosTarea);\n      return tarea;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put(`/tareas/${id}`, datosTarea);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al actualizar tarea con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  eliminar: async id => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      const tarea = datosMock.tareas.find(t => t.id === parseInt(id));\n      if (!tarea) throw new Error(`Tarea con ID ${id} no encontrada`);\n      datosMock.tareas = datosMock.tareas.filter(t => t.id !== parseInt(id));\n      return tarea;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.delete(`/tareas/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al eliminar tarea con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Servicios para proyectos\nexport const servicioProyectos = {\n  obtenerTodos: async (filtros = {}) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      let proyectosFiltrados = [...datosMock.proyectos];\n      if (filtros.estado) {\n        proyectosFiltrados = proyectosFiltrados.filter(proyecto => proyecto.estado === filtros.estado);\n      }\n      if (filtros.cliente) {\n        proyectosFiltrados = proyectosFiltrados.filter(proyecto => proyecto.cliente === filtros.cliente);\n      }\n      return proyectosFiltrados;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/proyectos', {\n        params: filtros\n      });\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener proyectos:', error);\n      throw error;\n    }\n  },\n  obtenerPorId: async id => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const proyecto = datosMock.proyectos.find(p => p.id === parseInt(id));\n      if (!proyecto) throw new Error(`Proyecto con ID ${id} no encontrado`);\n      return proyecto;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/proyectos/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al obtener proyecto con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  crear: async datosProyecto => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 800));\n      const nuevoProyecto = {\n        ...datosProyecto,\n        id: datosMock.proyectos.length > 0 ? Math.max(...datosMock.proyectos.map(p => p.id)) + 1 : 1,\n        progreso: 0\n      };\n      datosMock.proyectos.push(nuevoProyecto);\n      return nuevoProyecto;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/proyectos', datosProyecto);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al crear proyecto:', error);\n      throw error;\n    }\n  },\n  actualizar: async (id, datosProyecto) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      const proyecto = datosMock.proyectos.find(p => p.id === parseInt(id));\n      if (!proyecto) throw new Error(`Proyecto con ID ${id} no encontrado`);\n      Object.assign(proyecto, datosProyecto);\n      return proyecto;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put(`/proyectos/${id}`, datosProyecto);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al actualizar proyecto con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  eliminar: async id => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      const proyecto = datosMock.proyectos.find(p => p.id === parseInt(id));\n      if (!proyecto) throw new Error(`Proyecto con ID ${id} no encontrado`);\n      datosMock.proyectos = datosMock.proyectos.filter(p => p.id !== parseInt(id));\n      return proyecto;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.delete(`/proyectos/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al eliminar proyecto con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Servicios para informes\nexport const servicioInformes = {\n  obtenerTodos: async (filtros = {}) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 550));\n      let informesFiltrados = [...datosMock.informes];\n      if (filtros.tipo) {\n        informesFiltrados = informesFiltrados.filter(informe => informe.tipo === filtros.tipo);\n      }\n      if (filtros.proyecto) {\n        informesFiltrados = informesFiltrados.filter(informe => informe.proyecto === filtros.proyecto);\n      }\n      return informesFiltrados;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/informes', {\n        params: filtros\n      });\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener informes:', error);\n      throw error;\n    }\n  },\n  obtenerPorId: async id => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const informe = datosMock.informes.find(i => i.id === parseInt(id));\n      if (!informe) throw new Error(`Informe con ID ${id} no encontrado`);\n      return informe;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/informes/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al obtener informe con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  crear: async datosInforme => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 700));\n      const nuevoInforme = {\n        ...datosInforme,\n        id: datosMock.informes.length > 0 ? Math.max(...datosMock.informes.map(i => i.id)) + 1 : 1,\n        fechaCreacion: new Date().toISOString().split('T')[0]\n      };\n      datosMock.informes.push(nuevoInforme);\n      return nuevoInforme;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/informes', datosInforme);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al crear informe:', error);\n      throw error;\n    }\n  },\n  actualizar: async (id, datosInforme) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      const informe = datosMock.informes.find(i => i.id === parseInt(id));\n      if (!informe) throw new Error(`Informe con ID ${id} no encontrado`);\n      Object.assign(informe, datosInforme);\n      return informe;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put(`/informes/${id}`, datosInforme);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al actualizar informe con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  eliminar: async id => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      const informe = datosMock.informes.find(i => i.id === parseInt(id));\n      if (!informe) throw new Error(`Informe con ID ${id} no encontrado`);\n      datosMock.informes = datosMock.informes.filter(i => i.id !== parseInt(id));\n      return informe;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.delete(`/informes/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al eliminar informe con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  exportar: async (id, formato = 'pdf') => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const informe = datosMock.informes.find(i => i.id === parseInt(id));\n      if (!informe) throw new Error(`Informe con ID ${id} no encontrado`);\n      return {\n        contenido: `Este es el contenido del informe ${informe.titulo} en formato ${formato}`,\n        tipo: formato\n      };\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/informes/${id}/exportar`, {\n        params: {\n          formato\n        },\n        responseType: 'blob'\n      });\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al exportar informe con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Servicios para usuarios (clientes y trabajadores)\nexport const servicioUsuarios = {\n  obtenerTodos: async (filtros = {}) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      if (filtros.tipo === 'cliente') {\n        return [...datosMock.clientes];\n      } else if (filtros.tipo === 'trabajador') {\n        return [...datosMock.trabajadores];\n      } else {\n        // Si no se especifica tipo, devolver todos\n        return [...datosMock.clientes, ...datosMock.trabajadores];\n      }\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/usuarios', {\n        params: filtros\n      });\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener usuarios:', error);\n      throw error;\n    }\n  },\n  obtenerPorId: async id => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Buscar en clientes y trabajadores\n      const cliente = datosMock.clientes.find(c => c.id === parseInt(id));\n      if (cliente) return {\n        ...cliente,\n        tipo: 'cliente'\n      };\n      const trabajador = datosMock.trabajadores.find(t => t.id === parseInt(id));\n      if (trabajador) return {\n        ...trabajador,\n        tipo: 'trabajador'\n      };\n      throw new Error(`Usuario con ID ${id} no encontrado`);\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/usuarios/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al obtener usuario con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  crear: async datosUsuario => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 700));\n      if (datosUsuario.tipo === 'cliente') {\n        const nuevoCliente = {\n          ...datosUsuario,\n          id: datosMock.clientes.length > 0 ? Math.max(...datosMock.clientes.map(c => c.id)) + 1 : 1,\n          fechaRegistro: new Date().toISOString().split('T')[0]\n        };\n        datosMock.clientes.push(nuevoCliente);\n        return nuevoCliente;\n      } else if (datosUsuario.tipo === 'trabajador') {\n        const nuevoTrabajador = {\n          ...datosUsuario,\n          id: datosMock.trabajadores.length > 0 ? Math.max(...datosMock.trabajadores.map(t => t.id)) + 1 : 1,\n          fechaContratacion: new Date().toISOString().split('T')[0]\n        };\n        datosMock.trabajadores.push(nuevoTrabajador);\n        return nuevoTrabajador;\n      } else {\n        throw new Error('Tipo de usuario no válido');\n      }\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/usuarios', datosUsuario);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al crear usuario:', error);\n      throw error;\n    }\n  },\n  actualizar: async (id, datosUsuario) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n\n      // Buscar en clientes y trabajadores\n      const cliente = datosMock.clientes.find(c => c.id === parseInt(id));\n      if (cliente) {\n        Object.assign(cliente, datosUsuario);\n        return cliente;\n      }\n      const trabajador = datosMock.trabajadores.find(t => t.id === parseInt(id));\n      if (trabajador) {\n        Object.assign(trabajador, datosUsuario);\n        return trabajador;\n      }\n      throw new Error(`Usuario con ID ${id} no encontrado`);\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put(`/usuarios/${id}`, datosUsuario);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al actualizar usuario con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  eliminar: async id => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n\n      // Buscar en clientes y trabajadores\n      const cliente = datosMock.clientes.find(c => c.id === parseInt(id));\n      if (cliente) {\n        datosMock.clientes = datosMock.clientes.filter(c => c.id !== parseInt(id));\n        return cliente;\n      }\n      const trabajador = datosMock.trabajadores.find(t => t.id === parseInt(id));\n      if (trabajador) {\n        datosMock.trabajadores = datosMock.trabajadores.filter(t => t.id !== parseInt(id));\n        return trabajador;\n      }\n      throw new Error(`Usuario con ID ${id} no encontrado`);\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.delete(`/usuarios/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al eliminar usuario con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Servicios para configuración del sistema\nexport const servicioConfiguracion = {\n  obtenerGeneral: async () => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      return {\n        nombreEmpresa: 'AlhambraCRM',\n        logoEmpresa: '/assets/imgs/logo.png',\n        colorPrimario: '#3498db',\n        colorSecundario: '#2ecc71',\n        idiomaPredeterminado: 'es',\n        zonaHoraria: 'Europe/Madrid',\n        formatoFecha: 'DD/MM/YYYY',\n        formatoHora: '24h'\n      };\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/configuracion/general');\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener configuración general:', error);\n      throw error;\n    }\n  },\n  guardarGeneral: async datosConfiguracion => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      return datosConfiguracion;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put('/configuracion/general', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al guardar configuración general:', error);\n      throw error;\n    }\n  },\n  obtenerCorreo: async () => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      return {\n        servidorSmtp: 'smtp.gmail.com',\n        puertoSmtp: 587,\n        usuarioSmtp: 'alhambra.crm@gmail.com',\n        contrasenaSmtp: 'password',\n        asuntoPredeterminado: 'Correo electrónico desde AlhambraCRM',\n        cuerpoPredeterminado: 'Este es el cuerpo del correo electrónico'\n      };\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/configuracion/correo');\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener configuración de correo:', error);\n      throw error;\n    }\n  },\n  guardarCorreo: async datosConfiguracion => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      return datosConfiguracion;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put('/configuracion/correo', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al guardar configuración de correo:', error);\n      throw error;\n    }\n  },\n  probarCorreo: async datosConfiguracion => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        mensaje: 'Correo electrónico enviado correctamente'\n      };\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/configuracion/correo/probar', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al probar configuración de correo:', error);\n      throw error;\n    }\n  },\n  obtenerNotificaciones: async () => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      return {\n        notificacionesActivadas: true,\n        tipoNotificaciones: ['email', 'sms'],\n        asuntoNotificacion: 'Notificación desde AlhambraCRM',\n        cuerpoNotificacion: 'Este es el cuerpo de la notificación'\n      };\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/configuracion/notificaciones');\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener configuración de notificaciones:', error);\n      throw error;\n    }\n  },\n  guardarNotificaciones: async datosConfiguracion => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      return datosConfiguracion;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put('/configuracion/notificaciones', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al guardar configuración de notificaciones:', error);\n      throw error;\n    }\n  },\n  obtenerSeguridad: async () => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      return {\n        autenticacionActivada: true,\n        tipoAutenticacion: 'local',\n        claveSecreta: 'clave_secreta',\n        tiempoSesion: 30\n      };\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/configuracion/seguridad');\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener configuración de seguridad:', error);\n      throw error;\n    }\n  },\n  guardarSeguridad: async datosConfiguracion => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      return datosConfiguracion;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put('/configuracion/seguridad', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al guardar configuración de seguridad:', error);\n      throw error;\n    }\n  },\n  obtenerBackup: async () => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      return {\n        backupActivado: true,\n        tipoBackup: 'local',\n        rutaBackup: '/backup',\n        frecuenciaBackup: 'diario'\n      };\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/configuracion/backup');\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener configuración de backup:', error);\n      throw error;\n    }\n  },\n  guardarBackup: async datosConfiguracion => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      return datosConfiguracion;\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put('/configuracion/backup', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al guardar configuración de backup:', error);\n      throw error;\n    }\n  },\n  crearBackup: async tipo => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        mensaje: 'Backup creado correctamente'\n      };\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/configuracion/backup/crear', {\n        tipo\n      });\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al crear backup:', error);\n      throw error;\n    }\n  },\n  descargarBackup: async id => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        contenido: 'Este es el contenido del backup',\n        tipo: 'application/zip'\n      };\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/configuracion/backup/${id}/descargar`, {\n        responseType: 'blob'\n      });\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al descargar backup con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  eliminarBackup: async id => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      return {\n        mensaje: 'Backup eliminado correctamente'\n      };\n    }\n    try {\n      const api = configurarAxios();\n      const respuesta = await api.delete(`/configuracion/backup/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al eliminar backup con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Servicios para autenticación\nexport const servicioAutenticacion = {\n  iniciarSesion: async credenciales => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const usuario = datosMock.trabajadores.find(t => t.email === credenciales.email && t.contrasena === credenciales.contrasena);\n      if (!usuario) throw new Error('Credenciales inválidas');\n      return {\n        token: 'token_de_autenticacion',\n        usuario: {\n          id: usuario.id,\n          nombre: usuario.nombre,\n          email: usuario.email,\n          departamento: usuario.departamento,\n          cargo: usuario.cargo\n        }\n      };\n    }\n    try {\n      const api = axios.create({\n        baseURL: API_URL,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const respuesta = await api.post('/auth/login', credenciales);\n\n      // Guardar token en localStorage\n      if (respuesta.data.token) {\n        localStorage.setItem('token', respuesta.data.token);\n        localStorage.setItem('usuario', JSON.stringify(respuesta.data.usuario));\n      }\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al iniciar sesión:', error);\n      throw error;\n    }\n  },\n  registrar: async datosUsuario => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const nuevoTrabajador = {\n        ...datosUsuario,\n        id: datosMock.trabajadores.length > 0 ? Math.max(...datosMock.trabajadores.map(t => t.id)) + 1 : 1,\n        fechaContratacion: new Date().toISOString().split('T')[0]\n      };\n      datosMock.trabajadores.push(nuevoTrabajador);\n      return {\n        token: 'token_de_autenticacion',\n        usuario: {\n          id: nuevoTrabajador.id,\n          nombre: nuevoTrabajador.nombre,\n          email: nuevoTrabajador.email,\n          departamento: nuevoTrabajador.departamento,\n          cargo: nuevoTrabajador.cargo\n        }\n      };\n    }\n    try {\n      const api = axios.create({\n        baseURL: API_URL,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const respuesta = await api.post('/auth/registro', datosUsuario);\n\n      // Guardar token en localStorage si el registro incluye inicio de sesión\n      if (respuesta.data.token) {\n        localStorage.setItem('token', respuesta.data.token);\n        localStorage.setItem('usuario', JSON.stringify(respuesta.data.usuario));\n      }\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al registrar usuario:', error);\n      throw error;\n    }\n  },\n  cerrarSesion: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('usuario');\n  },\n  obtenerUsuarioActual: () => {\n    const usuario = localStorage.getItem('usuario');\n    return usuario ? JSON.parse(usuario) : null;\n  },\n  estaAutenticado: () => {\n    return !!localStorage.getItem('token');\n  }\n};\n\n// Exportar todos los servicios juntos\nexport default {\n  tareas: servicioTareas,\n  proyectos: servicioProyectos,\n  informes: servicioInformes,\n  usuarios: servicioUsuarios,\n  autenticacion: servicioAutenticacion,\n  configuracion: servicioConfiguracion\n};","map":{"version":3,"names":["axios","API_URL","MODO_DESARROLLO","configurarAxios","token","localStorage","getItem","create","baseURL","headers","datosMock","clientes","id","nombre","email","telefono","direccion","ciudad","estado","fechaRegistro","trabajadores","departamento","cargo","fechaContratacion","proyectos","descripcion","fechaInicio","fechaFin","presupuesto","cliente","responsable","progreso","informes","titulo","tipo","fechaCreacion","fechaActualizacion","autor","proyecto","contenido","tareas","fechaVencimiento","prioridad","asignado","servicioTareas","obtenerTodas","filtros","Promise","resolve","setTimeout","tareasFiltradas","filter","tarea","api","respuesta","get","params","data","error","console","obtenerPorId","find","t","parseInt","Error","crear","datosTarea","nuevaTarea","length","Math","max","map","Date","toISOString","split","push","post","actualizar","Object","assign","put","eliminar","delete","servicioProyectos","obtenerTodos","proyectosFiltrados","p","datosProyecto","nuevoProyecto","servicioInformes","informesFiltrados","informe","i","datosInforme","nuevoInforme","exportar","formato","responseType","servicioUsuarios","c","trabajador","datosUsuario","nuevoCliente","nuevoTrabajador","servicioConfiguracion","obtenerGeneral","nombreEmpresa","logoEmpresa","colorPrimario","colorSecundario","idiomaPredeterminado","zonaHoraria","formatoFecha","formatoHora","guardarGeneral","datosConfiguracion","obtenerCorreo","servidorSmtp","puertoSmtp","usuarioSmtp","contrasenaSmtp","asuntoPredeterminado","cuerpoPredeterminado","guardarCorreo","probarCorreo","mensaje","obtenerNotificaciones","notificacionesActivadas","tipoNotificaciones","asuntoNotificacion","cuerpoNotificacion","guardarNotificaciones","obtenerSeguridad","autenticacionActivada","tipoAutenticacion","claveSecreta","tiempoSesion","guardarSeguridad","obtenerBackup","backupActivado","tipoBackup","rutaBackup","frecuenciaBackup","guardarBackup","crearBackup","descargarBackup","eliminarBackup","servicioAutenticacion","iniciarSesion","credenciales","usuario","contrasena","setItem","JSON","stringify","registrar","cerrarSesion","removeItem","obtenerUsuarioActual","parse","estaAutenticado","usuarios","autenticacion","configuracion"],"sources":["C:/Users/andre/Desktop/ProyectoAndres/alhambraCrm/frontend_react/src/servicios/api.js"],"sourcesContent":["import axios from 'axios';\n\n// URL base de la API\nconst API_URL = 'http://localhost/alhambraCrm/backend/api';\n\n// Modo de desarrollo (usar datos de ejemplo)\nconst MODO_DESARROLLO = true;\n\n// Configuración de axios con token de autenticación\nconst configurarAxios = () => {\n  const token = localStorage.getItem('token');\n  \n  return axios.create({\n    baseURL: API_URL,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    }\n  });\n};\n\n// Datos de ejemplo para desarrollo\nconst datosMock = {\n  clientes: [\n    { id: 1, nombre: 'Empresa ABC', email: 'contacto@abc.com', telefono: '612345678', direccion: 'Calle Principal 123', ciudad: 'Granada', estado: 'Activo', fechaRegistro: '2025-01-15' },\n    { id: 2, nombre: 'Corporación XYZ', email: 'info@xyz.com', telefono: '687654321', direccion: 'Avenida Central 456', ciudad: 'Sevilla', estado: 'Activo', fechaRegistro: '2025-02-20' },\n    { id: 3, nombre: 'Industrias 123', email: 'ventas@123.com', telefono: '654123789', direccion: 'Plaza Mayor 789', ciudad: 'Madrid', estado: 'Pendiente', fechaRegistro: '2025-03-10' },\n    { id: 4, nombre: 'Servicios Pro', email: 'admin@pro.com', telefono: '678912345', direccion: 'Calle Secundaria 321', ciudad: 'Barcelona', estado: 'Activo', fechaRegistro: '2025-03-25' }\n  ],\n  trabajadores: [\n    { id: 1, nombre: 'Ana Martínez', email: 'ana@alhambra.com', telefono: '612345678', departamento: 'Ventas', cargo: 'Gerente de Ventas', estado: 'Activo', fechaContratacion: '2024-01-10' },\n    { id: 2, nombre: 'Luis García', email: 'luis@alhambra.com', telefono: '687654321', departamento: 'Soporte', cargo: 'Técnico de Soporte', estado: 'Activo', fechaContratacion: '2024-02-15' },\n    { id: 3, nombre: 'Elena Ruiz', email: 'elena@alhambra.com', telefono: '654123789', departamento: 'Desarrollo', cargo: 'Desarrolladora Senior', estado: 'Inactivo', fechaContratacion: '2024-03-05' },\n    { id: 4, nombre: 'Carlos Sánchez', email: 'carlos@alhambra.com', telefono: '678912345', departamento: 'Marketing', cargo: 'Especialista en Marketing', estado: 'Activo', fechaContratacion: '2024-03-20' }\n  ],\n  proyectos: [\n    { id: 1, nombre: 'Desarrollo de aplicación web', descripcion: 'Desarrollo de una aplicación web para gestión de inventario', fechaInicio: '2025-03-01', fechaFin: '2025-06-30', estado: 'En progreso', presupuesto: 15000, cliente: 'Empresa ABC', responsable: 'Elena Ruiz', progreso: 45 },\n    { id: 2, nombre: 'Rediseño de marca', descripcion: 'Rediseño completo de la identidad corporativa', fechaInicio: '2025-02-15', fechaFin: '2025-04-15', estado: 'Completado', presupuesto: 8000, cliente: 'Corporación XYZ', responsable: 'Carlos Sánchez', progreso: 100 },\n    { id: 3, nombre: 'Campaña de marketing digital', descripcion: 'Implementación de estrategia de marketing en redes sociales', fechaInicio: '2025-04-01', fechaFin: '2025-07-31', estado: 'Pendiente', presupuesto: 12000, cliente: 'Industrias 123', responsable: 'Ana Martínez', progreso: 10 }\n  ],\n  informes: [\n    { id: 1, titulo: 'Informe de ventas Q1 2025', descripcion: 'Análisis detallado de las ventas del primer trimestre de 2025', tipo: 'Ventas', fechaCreacion: '2025-04-01', fechaActualizacion: '2025-04-05', autor: 'Ana Martínez', proyecto: 'Desarrollo de aplicación web', contenido: 'Este informe muestra un análisis detallado de las ventas del primer trimestre del año 2025. Se observa un incremento del 15% respecto al mismo período del año anterior.' },\n    { id: 2, titulo: 'Informe financiero marzo 2025', descripcion: 'Resumen financiero del mes de marzo de 2025', tipo: 'Financiero', fechaCreacion: '2025-04-02', fechaActualizacion: '2025-04-02', autor: 'Luis García', proyecto: 'Rediseño de marca', contenido: 'Este informe presenta el estado financiero de la empresa durante el mes de marzo de 2025. Se incluyen ingresos, gastos y balance general.' },\n    { id: 3, titulo: 'Informe de progreso de proyecto', descripcion: 'Estado actual del proyecto de desarrollo web', tipo: 'Proyecto', fechaCreacion: '2025-03-25', fechaActualizacion: '2025-04-03', autor: 'Elena Ruiz', proyecto: 'Desarrollo de aplicación web', contenido: 'Este informe detalla el avance del proyecto de desarrollo web. Se han completado las fases de diseño y se está avanzando en la implementación del backend.' }\n  ],\n  tareas: [\n    { id: 1, titulo: 'Diseñar interfaz de usuario', descripcion: 'Crear wireframes y mockups para la aplicación', fechaCreacion: '2025-03-05', fechaVencimiento: '2025-03-15', estado: 'Completada', prioridad: 'Alta', asignado: 'Elena Ruiz', proyecto: 'Desarrollo de aplicación web' },\n    { id: 2, titulo: 'Implementar backend', descripcion: 'Desarrollar API RESTful para la aplicación', fechaCreacion: '2025-03-16', fechaVencimiento: '2025-04-15', estado: 'En progreso', prioridad: 'Alta', asignado: 'Luis García', proyecto: 'Desarrollo de aplicación web' },\n    { id: 3, titulo: 'Crear logo', descripcion: 'Diseñar nuevo logo corporativo', fechaCreacion: '2025-02-20', fechaVencimiento: '2025-03-10', estado: 'Completada', prioridad: 'Media', asignado: 'Carlos Sánchez', proyecto: 'Rediseño de marca' },\n    { id: 4, titulo: 'Planificar campaña en redes sociales', descripcion: 'Definir estrategia y calendario de publicaciones', fechaCreacion: '2025-04-02', fechaVencimiento: '2025-04-20', estado: 'Pendiente', prioridad: 'Media', asignado: 'Ana Martínez', proyecto: 'Campaña de marketing digital' }\n  ]\n};\n\n// Servicios para tareas\nexport const servicioTareas = {\n  obtenerTodas: async (filtros = {}) => {\n    if (MODO_DESARROLLO) {\n      // Simular retraso de red\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Filtrar tareas según los criterios\n      let tareasFiltradas = [...datosMock.tareas];\n      \n      if (filtros.estado) {\n        tareasFiltradas = tareasFiltradas.filter(tarea => tarea.estado === filtros.estado);\n      }\n      \n      if (filtros.proyecto) {\n        tareasFiltradas = tareasFiltradas.filter(tarea => tarea.proyecto === filtros.proyecto);\n      }\n      \n      return tareasFiltradas;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/tareas', { params: filtros });\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener tareas:', error);\n      throw error;\n    }\n  },\n  \n  obtenerPorId: async (id) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const tarea = datosMock.tareas.find(t => t.id === parseInt(id));\n      if (!tarea) throw new Error(`Tarea con ID ${id} no encontrada`);\n      return tarea;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/tareas/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al obtener tarea con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  crear: async (datosTarea) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 700));\n      const nuevaTarea = {\n        ...datosTarea,\n        id: datosMock.tareas.length > 0 ? Math.max(...datosMock.tareas.map(t => t.id)) + 1 : 1,\n        fechaCreacion: new Date().toISOString().split('T')[0]\n      };\n      datosMock.tareas.push(nuevaTarea);\n      return nuevaTarea;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/tareas', datosTarea);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al crear tarea:', error);\n      throw error;\n    }\n  },\n  \n  actualizar: async (id, datosTarea) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      const tarea = datosMock.tareas.find(t => t.id === parseInt(id));\n      if (!tarea) throw new Error(`Tarea con ID ${id} no encontrada`);\n      Object.assign(tarea, datosTarea);\n      return tarea;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put(`/tareas/${id}`, datosTarea);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al actualizar tarea con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  eliminar: async (id) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      const tarea = datosMock.tareas.find(t => t.id === parseInt(id));\n      if (!tarea) throw new Error(`Tarea con ID ${id} no encontrada`);\n      datosMock.tareas = datosMock.tareas.filter(t => t.id !== parseInt(id));\n      return tarea;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.delete(`/tareas/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al eliminar tarea con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Servicios para proyectos\nexport const servicioProyectos = {\n  obtenerTodos: async (filtros = {}) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      \n      let proyectosFiltrados = [...datosMock.proyectos];\n      \n      if (filtros.estado) {\n        proyectosFiltrados = proyectosFiltrados.filter(proyecto => proyecto.estado === filtros.estado);\n      }\n      \n      if (filtros.cliente) {\n        proyectosFiltrados = proyectosFiltrados.filter(proyecto => proyecto.cliente === filtros.cliente);\n      }\n      \n      return proyectosFiltrados;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/proyectos', { params: filtros });\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener proyectos:', error);\n      throw error;\n    }\n  },\n  \n  obtenerPorId: async (id) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const proyecto = datosMock.proyectos.find(p => p.id === parseInt(id));\n      if (!proyecto) throw new Error(`Proyecto con ID ${id} no encontrado`);\n      return proyecto;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/proyectos/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al obtener proyecto con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  crear: async (datosProyecto) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 800));\n      const nuevoProyecto = {\n        ...datosProyecto,\n        id: datosMock.proyectos.length > 0 ? Math.max(...datosMock.proyectos.map(p => p.id)) + 1 : 1,\n        progreso: 0\n      };\n      datosMock.proyectos.push(nuevoProyecto);\n      return nuevoProyecto;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/proyectos', datosProyecto);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al crear proyecto:', error);\n      throw error;\n    }\n  },\n  \n  actualizar: async (id, datosProyecto) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      const proyecto = datosMock.proyectos.find(p => p.id === parseInt(id));\n      if (!proyecto) throw new Error(`Proyecto con ID ${id} no encontrado`);\n      Object.assign(proyecto, datosProyecto);\n      return proyecto;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put(`/proyectos/${id}`, datosProyecto);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al actualizar proyecto con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  eliminar: async (id) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      const proyecto = datosMock.proyectos.find(p => p.id === parseInt(id));\n      if (!proyecto) throw new Error(`Proyecto con ID ${id} no encontrado`);\n      datosMock.proyectos = datosMock.proyectos.filter(p => p.id !== parseInt(id));\n      return proyecto;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.delete(`/proyectos/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al eliminar proyecto con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Servicios para informes\nexport const servicioInformes = {\n  obtenerTodos: async (filtros = {}) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 550));\n      \n      let informesFiltrados = [...datosMock.informes];\n      \n      if (filtros.tipo) {\n        informesFiltrados = informesFiltrados.filter(informe => informe.tipo === filtros.tipo);\n      }\n      \n      if (filtros.proyecto) {\n        informesFiltrados = informesFiltrados.filter(informe => informe.proyecto === filtros.proyecto);\n      }\n      \n      return informesFiltrados;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/informes', { params: filtros });\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener informes:', error);\n      throw error;\n    }\n  },\n  \n  obtenerPorId: async (id) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const informe = datosMock.informes.find(i => i.id === parseInt(id));\n      if (!informe) throw new Error(`Informe con ID ${id} no encontrado`);\n      return informe;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/informes/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al obtener informe con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  crear: async (datosInforme) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 700));\n      const nuevoInforme = {\n        ...datosInforme,\n        id: datosMock.informes.length > 0 ? Math.max(...datosMock.informes.map(i => i.id)) + 1 : 1,\n        fechaCreacion: new Date().toISOString().split('T')[0]\n      };\n      datosMock.informes.push(nuevoInforme);\n      return nuevoInforme;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/informes', datosInforme);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al crear informe:', error);\n      throw error;\n    }\n  },\n  \n  actualizar: async (id, datosInforme) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      const informe = datosMock.informes.find(i => i.id === parseInt(id));\n      if (!informe) throw new Error(`Informe con ID ${id} no encontrado`);\n      Object.assign(informe, datosInforme);\n      return informe;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put(`/informes/${id}`, datosInforme);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al actualizar informe con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  eliminar: async (id) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      const informe = datosMock.informes.find(i => i.id === parseInt(id));\n      if (!informe) throw new Error(`Informe con ID ${id} no encontrado`);\n      datosMock.informes = datosMock.informes.filter(i => i.id !== parseInt(id));\n      return informe;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.delete(`/informes/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al eliminar informe con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  exportar: async (id, formato = 'pdf') => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const informe = datosMock.informes.find(i => i.id === parseInt(id));\n      if (!informe) throw new Error(`Informe con ID ${id} no encontrado`);\n      return {\n        contenido: `Este es el contenido del informe ${informe.titulo} en formato ${formato}`,\n        tipo: formato\n      };\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/informes/${id}/exportar`, { \n        params: { formato },\n        responseType: 'blob'\n      });\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al exportar informe con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Servicios para usuarios (clientes y trabajadores)\nexport const servicioUsuarios = {\n  obtenerTodos: async (filtros = {}) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      if (filtros.tipo === 'cliente') {\n        return [...datosMock.clientes];\n      } else if (filtros.tipo === 'trabajador') {\n        return [...datosMock.trabajadores];\n      } else {\n        // Si no se especifica tipo, devolver todos\n        return [...datosMock.clientes, ...datosMock.trabajadores];\n      }\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/usuarios', { params: filtros });\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener usuarios:', error);\n      throw error;\n    }\n  },\n  \n  obtenerPorId: async (id) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Buscar en clientes y trabajadores\n      const cliente = datosMock.clientes.find(c => c.id === parseInt(id));\n      if (cliente) return { ...cliente, tipo: 'cliente' };\n      \n      const trabajador = datosMock.trabajadores.find(t => t.id === parseInt(id));\n      if (trabajador) return { ...trabajador, tipo: 'trabajador' };\n      \n      throw new Error(`Usuario con ID ${id} no encontrado`);\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/usuarios/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al obtener usuario con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  crear: async (datosUsuario) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 700));\n      \n      if (datosUsuario.tipo === 'cliente') {\n        const nuevoCliente = {\n          ...datosUsuario,\n          id: datosMock.clientes.length > 0 ? Math.max(...datosMock.clientes.map(c => c.id)) + 1 : 1,\n          fechaRegistro: new Date().toISOString().split('T')[0]\n        };\n        datosMock.clientes.push(nuevoCliente);\n        return nuevoCliente;\n      } else if (datosUsuario.tipo === 'trabajador') {\n        const nuevoTrabajador = {\n          ...datosUsuario,\n          id: datosMock.trabajadores.length > 0 ? Math.max(...datosMock.trabajadores.map(t => t.id)) + 1 : 1,\n          fechaContratacion: new Date().toISOString().split('T')[0]\n        };\n        datosMock.trabajadores.push(nuevoTrabajador);\n        return nuevoTrabajador;\n      } else {\n        throw new Error('Tipo de usuario no válido');\n      }\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/usuarios', datosUsuario);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al crear usuario:', error);\n      throw error;\n    }\n  },\n  \n  actualizar: async (id, datosUsuario) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      \n      // Buscar en clientes y trabajadores\n      const cliente = datosMock.clientes.find(c => c.id === parseInt(id));\n      if (cliente) {\n        Object.assign(cliente, datosUsuario);\n        return cliente;\n      }\n      \n      const trabajador = datosMock.trabajadores.find(t => t.id === parseInt(id));\n      if (trabajador) {\n        Object.assign(trabajador, datosUsuario);\n        return trabajador;\n      }\n      \n      throw new Error(`Usuario con ID ${id} no encontrado`);\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put(`/usuarios/${id}`, datosUsuario);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al actualizar usuario con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  eliminar: async (id) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      \n      // Buscar en clientes y trabajadores\n      const cliente = datosMock.clientes.find(c => c.id === parseInt(id));\n      if (cliente) {\n        datosMock.clientes = datosMock.clientes.filter(c => c.id !== parseInt(id));\n        return cliente;\n      }\n      \n      const trabajador = datosMock.trabajadores.find(t => t.id === parseInt(id));\n      if (trabajador) {\n        datosMock.trabajadores = datosMock.trabajadores.filter(t => t.id !== parseInt(id));\n        return trabajador;\n      }\n      \n      throw new Error(`Usuario con ID ${id} no encontrado`);\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.delete(`/usuarios/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al eliminar usuario con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Servicios para configuración del sistema\nexport const servicioConfiguracion = {\n  obtenerGeneral: async () => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      \n      return {\n        nombreEmpresa: 'AlhambraCRM',\n        logoEmpresa: '/assets/imgs/logo.png',\n        colorPrimario: '#3498db',\n        colorSecundario: '#2ecc71',\n        idiomaPredeterminado: 'es',\n        zonaHoraria: 'Europe/Madrid',\n        formatoFecha: 'DD/MM/YYYY',\n        formatoHora: '24h'\n      };\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/configuracion/general');\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener configuración general:', error);\n      throw error;\n    }\n  },\n  \n  guardarGeneral: async (datosConfiguracion) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      return datosConfiguracion;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put('/configuracion/general', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al guardar configuración general:', error);\n      throw error;\n    }\n  },\n  \n  obtenerCorreo: async () => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      \n      return {\n        servidorSmtp: 'smtp.gmail.com',\n        puertoSmtp: 587,\n        usuarioSmtp: 'alhambra.crm@gmail.com',\n        contrasenaSmtp: 'password',\n        asuntoPredeterminado: 'Correo electrónico desde AlhambraCRM',\n        cuerpoPredeterminado: 'Este es el cuerpo del correo electrónico'\n      };\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/configuracion/correo');\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener configuración de correo:', error);\n      throw error;\n    }\n  },\n  \n  guardarCorreo: async (datosConfiguracion) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      return datosConfiguracion;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put('/configuracion/correo', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al guardar configuración de correo:', error);\n      throw error;\n    }\n  },\n  \n  probarCorreo: async (datosConfiguracion) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      return {\n        mensaje: 'Correo electrónico enviado correctamente'\n      };\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/configuracion/correo/probar', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al probar configuración de correo:', error);\n      throw error;\n    }\n  },\n  \n  obtenerNotificaciones: async () => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      \n      return {\n        notificacionesActivadas: true,\n        tipoNotificaciones: ['email', 'sms'],\n        asuntoNotificacion: 'Notificación desde AlhambraCRM',\n        cuerpoNotificacion: 'Este es el cuerpo de la notificación'\n      };\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/configuracion/notificaciones');\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener configuración de notificaciones:', error);\n      throw error;\n    }\n  },\n  \n  guardarNotificaciones: async (datosConfiguracion) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      return datosConfiguracion;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put('/configuracion/notificaciones', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al guardar configuración de notificaciones:', error);\n      throw error;\n    }\n  },\n  \n  obtenerSeguridad: async () => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      \n      return {\n        autenticacionActivada: true,\n        tipoAutenticacion: 'local',\n        claveSecreta: 'clave_secreta',\n        tiempoSesion: 30\n      };\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/configuracion/seguridad');\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener configuración de seguridad:', error);\n      throw error;\n    }\n  },\n  \n  guardarSeguridad: async (datosConfiguracion) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      return datosConfiguracion;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put('/configuracion/seguridad', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al guardar configuración de seguridad:', error);\n      throw error;\n    }\n  },\n  \n  obtenerBackup: async () => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      \n      return {\n        backupActivado: true,\n        tipoBackup: 'local',\n        rutaBackup: '/backup',\n        frecuenciaBackup: 'diario'\n      };\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get('/configuracion/backup');\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al obtener configuración de backup:', error);\n      throw error;\n    }\n  },\n  \n  guardarBackup: async (datosConfiguracion) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 600));\n      return datosConfiguracion;\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.put('/configuracion/backup', datosConfiguracion);\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al guardar configuración de backup:', error);\n      throw error;\n    }\n  },\n  \n  crearBackup: async (tipo) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      return {\n        mensaje: 'Backup creado correctamente'\n      };\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.post('/configuracion/backup/crear', { tipo });\n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al crear backup:', error);\n      throw error;\n    }\n  },\n  \n  descargarBackup: async (id) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      return {\n        contenido: 'Este es el contenido del backup',\n        tipo: 'application/zip'\n      };\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.get(`/configuracion/backup/${id}/descargar`, {\n        responseType: 'blob'\n      });\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al descargar backup con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  eliminarBackup: async (id) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 400));\n      \n      return {\n        mensaje: 'Backup eliminado correctamente'\n      };\n    }\n    \n    try {\n      const api = configurarAxios();\n      const respuesta = await api.delete(`/configuracion/backup/${id}`);\n      return respuesta.data;\n    } catch (error) {\n      console.error(`Error al eliminar backup con ID ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Servicios para autenticación\nexport const servicioAutenticacion = {\n  iniciarSesion: async (credenciales) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const usuario = datosMock.trabajadores.find(t => t.email === credenciales.email && t.contrasena === credenciales.contrasena);\n      if (!usuario) throw new Error('Credenciales inválidas');\n      \n      return {\n        token: 'token_de_autenticacion',\n        usuario: {\n          id: usuario.id,\n          nombre: usuario.nombre,\n          email: usuario.email,\n          departamento: usuario.departamento,\n          cargo: usuario.cargo\n        }\n      };\n    }\n    \n    try {\n      const api = axios.create({\n        baseURL: API_URL,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      const respuesta = await api.post('/auth/login', credenciales);\n      \n      // Guardar token en localStorage\n      if (respuesta.data.token) {\n        localStorage.setItem('token', respuesta.data.token);\n        localStorage.setItem('usuario', JSON.stringify(respuesta.data.usuario));\n      }\n      \n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al iniciar sesión:', error);\n      throw error;\n    }\n  },\n  \n  registrar: async (datosUsuario) => {\n    if (MODO_DESARROLLO) {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const nuevoTrabajador = {\n        ...datosUsuario,\n        id: datosMock.trabajadores.length > 0 ? Math.max(...datosMock.trabajadores.map(t => t.id)) + 1 : 1,\n        fechaContratacion: new Date().toISOString().split('T')[0]\n      };\n      datosMock.trabajadores.push(nuevoTrabajador);\n      \n      return {\n        token: 'token_de_autenticacion',\n        usuario: {\n          id: nuevoTrabajador.id,\n          nombre: nuevoTrabajador.nombre,\n          email: nuevoTrabajador.email,\n          departamento: nuevoTrabajador.departamento,\n          cargo: nuevoTrabajador.cargo\n        }\n      };\n    }\n    \n    try {\n      const api = axios.create({\n        baseURL: API_URL,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      const respuesta = await api.post('/auth/registro', datosUsuario);\n      \n      // Guardar token en localStorage si el registro incluye inicio de sesión\n      if (respuesta.data.token) {\n        localStorage.setItem('token', respuesta.data.token);\n        localStorage.setItem('usuario', JSON.stringify(respuesta.data.usuario));\n      }\n      \n      return respuesta.data;\n    } catch (error) {\n      console.error('Error al registrar usuario:', error);\n      throw error;\n    }\n  },\n  \n  cerrarSesion: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('usuario');\n  },\n  \n  obtenerUsuarioActual: () => {\n    const usuario = localStorage.getItem('usuario');\n    return usuario ? JSON.parse(usuario) : null;\n  },\n  \n  estaAutenticado: () => {\n    return !!localStorage.getItem('token');\n  }\n};\n\n// Exportar todos los servicios juntos\nexport default {\n  tareas: servicioTareas,\n  proyectos: servicioProyectos,\n  informes: servicioInformes,\n  usuarios: servicioUsuarios,\n  autenticacion: servicioAutenticacion,\n  configuracion: servicioConfiguracion\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}