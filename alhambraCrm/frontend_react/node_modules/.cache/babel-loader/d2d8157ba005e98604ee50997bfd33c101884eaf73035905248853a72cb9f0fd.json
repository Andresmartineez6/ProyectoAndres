{"ast":null,"code":"import jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\n/**\n * Utilidad para exportar informes en formato PDF\n */\nexport const exportarInformePDF = informe => {\n  try {\n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n\n    // Configurar fuentes y colores\n    const colorPrimario = '#3498db';\n    const colorSecundario = '#2ecc71';\n    const colorTexto = '#333333';\n    const colorFondo = '#f8f9fa';\n\n    // Añadir encabezado con logo y título\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 40, 'F');\n\n    // Título del informe\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(28);\n    doc.text('AlhambraCRM', 105, 20, {\n      align: 'center'\n    });\n\n    // Subtítulo\n    doc.setFontSize(16);\n    doc.text(`Informe: ${informe.titulo || 'Sin título'}`, 105, 32, {\n      align: 'center'\n    });\n\n    // Añadir una franja decorativa\n    doc.setFillColor(colorSecundario);\n    doc.rect(0, 40, 210, 5, 'F');\n\n    // Información del informe - Sección de metadatos\n    doc.setTextColor(colorTexto);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n\n    // Crear un recuadro para los metadatos\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 55, 180, 70, 3, 3, 'F');\n\n    // Metadatos del informe\n    const fechaCreacion = formatearFecha(informe.fechaCreacion);\n    const fechaActualizacion = formatearFecha(informe.fechaActualizacion);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Fecha de creación:', 25, 70);\n    doc.setFont('helvetica', 'normal');\n    doc.text(fechaCreacion, 90, 70);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Última actualización:', 25, 85);\n    doc.setFont('helvetica', 'normal');\n    doc.text(fechaActualizacion, 90, 85);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Autor:', 25, 100);\n    doc.setFont('helvetica', 'normal');\n    doc.text(informe.autor || 'No especificado', 90, 100);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Tipo:', 25, 115);\n    doc.setFont('helvetica', 'normal');\n    doc.text(informe.tipo || 'No especificado', 90, 115);\n    if (informe.proyecto) {\n      doc.setFont('helvetica', 'bold');\n      doc.text('Proyecto:', 25, 130);\n      doc.setFont('helvetica', 'normal');\n      doc.text(informe.proyecto, 90, 130);\n    }\n\n    // Añadir descripción con un recuadro\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 140, 180, 50, 3, 3, 'F');\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(colorPrimario);\n    doc.text('Descripción', 25, 155);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.setTextColor(colorTexto);\n\n    // Dividir descripción en líneas para evitar que se salga de la página\n    const descripcionLineas = doc.splitTextToSize(informe.descripcion || 'No hay descripción disponible', 160);\n    doc.text(descripcionLineas, 25, 170);\n\n    // Añadir contenido principal con un recuadro\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 200, 180, 70, 3, 3, 'F');\n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(colorPrimario);\n    doc.text('Contenido', 25, 215);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.setTextColor(colorTexto);\n\n    // Dividir contenido en líneas\n    const contenidoLineas = doc.splitTextToSize(informe.contenido || 'No hay contenido disponible', 160);\n    doc.text(contenidoLineas, 25, 230);\n\n    // Añadir pie de página\n    const totalPaginas = doc.internal.getNumberOfPages();\n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n\n      // Añadir una franja decorativa en el pie de página\n      doc.setFillColor(colorPrimario);\n      doc.rect(0, 280, 210, 17, 'F');\n      doc.setFontSize(10);\n      doc.setTextColor(255, 255, 255);\n      doc.setFont('helvetica', 'normal');\n\n      // Pie de página con fecha y número de página\n      const fechaActual = new Date().toLocaleDateString('es-ES', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      doc.text(`AlhambraCRM - Documento generado el ${fechaActual}`, 105, 290, {\n        align: 'center'\n      });\n      doc.text(`Página ${i} de ${totalPaginas}`, 180, 290);\n    }\n\n    // Guardar el PDF con el nombre del informe\n    doc.save(`Informe_${informe.titulo.replace(/\\s+/g, '_')}.pdf`);\n    return true;\n  } catch (error) {\n    console.error('Error al exportar informe a PDF:', error);\n    throw new Error('Error al generar el PDF del informe. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Función simplificada para exportar lista de informes en formato PDF\n * Esta versión es más básica pero más robusta para evitar errores\n */\nexport const exportarListaInformesPDF = (informes, filtros = {}) => {\n  try {\n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n\n    // Configurar colores\n    const colorPrimario = '#3498db';\n\n    // Encabezado simple\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 30, 'F');\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(22);\n    doc.text('AlhambraCRM', 105, 15, {\n      align: 'center'\n    });\n    doc.setFontSize(14);\n    doc.text('Listado de Informes', 105, 25, {\n      align: 'center'\n    });\n\n    // Información básica\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`Total de informes: ${informes.length}`, 20, 45);\n    doc.text(`Fecha: ${new Date().toLocaleDateString('es-ES')}`, 20, 55);\n\n    // Tabla básica\n    const headers = ['Título', 'Tipo', 'Autor'];\n    const rows = [];\n\n    // Preparar datos para la tabla\n    for (let i = 0; i < informes.length; i++) {\n      const informe = informes[i];\n      rows.push([informe.titulo || 'Sin título', informe.tipo || 'Sin tipo', informe.autor || 'Sin autor']);\n    }\n\n    // Generar tabla\n    doc.autoTable({\n      head: [headers],\n      body: rows,\n      startY: 65,\n      theme: 'grid',\n      styles: {\n        fontSize: 10\n      },\n      headStyles: {\n        fillColor: colorPrimario\n      }\n    });\n\n    // Pie de página simple\n    const totalPaginas = doc.internal.getNumberOfPages();\n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n      doc.setFontSize(10);\n      doc.text(`Página ${i} de ${totalPaginas}`, 105, 290, {\n        align: 'center'\n      });\n    }\n\n    // Guardar PDF\n    doc.save('Listado_Informes.pdf');\n    return true;\n  } catch (error) {\n    console.error('Error al exportar lista de informes a PDF:', error);\n    throw new Error('Error al generar el PDF. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Utilidad para exportar informes en formato Excel\n * En una implementación real, esto se haría con una biblioteca como xlsx\n * Por ahora, simplemente mostramos un mensaje de que esta funcionalidad está en desarrollo\n */\nexport const exportarInformeExcel = informe => {\n  alert('La exportación a Excel está en desarrollo. Estará disponible próximamente.');\n};\n\n/**\n * Formatear fecha para mostrar en el PDF\n */\nconst formatearFecha = fechaStr => {\n  if (!fechaStr) return '-';\n  try {\n    const fecha = new Date(fechaStr);\n    if (isNaN(fecha.getTime())) return '-';\n    return fecha.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return '-';\n  }\n};\nexport default {\n  exportarInformePDF,\n  exportarListaInformesPDF,\n  exportarInformeExcel\n};","map":{"version":3,"names":["jsPDF","exportarInformePDF","informe","doc","colorPrimario","colorSecundario","colorTexto","colorFondo","setFillColor","rect","setFont","setTextColor","setFontSize","text","align","titulo","roundedRect","fechaCreacion","formatearFecha","fechaActualizacion","autor","tipo","proyecto","descripcionLineas","splitTextToSize","descripcion","contenidoLineas","contenido","totalPaginas","internal","getNumberOfPages","i","setPage","fechaActual","Date","toLocaleDateString","day","month","year","hour","minute","save","replace","error","console","Error","exportarListaInformesPDF","informes","filtros","length","headers","rows","push","autoTable","head","body","startY","theme","styles","fontSize","headStyles","fillColor","exportarInformeExcel","alert","fechaStr","fecha","isNaN","getTime"],"sources":["C:/Users/andre/Desktop/ProyectoAndres/alhambraCrm/frontend_react/src/utilidades/exportarPDF.js"],"sourcesContent":["import jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\n/**\n * Utilidad para exportar informes en formato PDF\n */\nexport const exportarInformePDF = (informe) => {\n  try {\n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n    \n    // Configurar fuentes y colores\n    const colorPrimario = '#3498db';\n    const colorSecundario = '#2ecc71';\n    const colorTexto = '#333333';\n    const colorFondo = '#f8f9fa';\n    \n    // Añadir encabezado con logo y título\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 40, 'F');\n    \n    // Título del informe\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(28);\n    doc.text('AlhambraCRM', 105, 20, { align: 'center' });\n    \n    // Subtítulo\n    doc.setFontSize(16);\n    doc.text(`Informe: ${informe.titulo || 'Sin título'}`, 105, 32, { align: 'center' });\n    \n    // Añadir una franja decorativa\n    doc.setFillColor(colorSecundario);\n    doc.rect(0, 40, 210, 5, 'F');\n    \n    // Información del informe - Sección de metadatos\n    doc.setTextColor(colorTexto);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    \n    // Crear un recuadro para los metadatos\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 55, 180, 70, 3, 3, 'F');\n    \n    // Metadatos del informe\n    const fechaCreacion = formatearFecha(informe.fechaCreacion);\n    const fechaActualizacion = formatearFecha(informe.fechaActualizacion);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Fecha de creación:', 25, 70);\n    doc.setFont('helvetica', 'normal');\n    doc.text(fechaCreacion, 90, 70);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Última actualización:', 25, 85);\n    doc.setFont('helvetica', 'normal');\n    doc.text(fechaActualizacion, 90, 85);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Autor:', 25, 100);\n    doc.setFont('helvetica', 'normal');\n    doc.text(informe.autor || 'No especificado', 90, 100);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text('Tipo:', 25, 115);\n    doc.setFont('helvetica', 'normal');\n    doc.text(informe.tipo || 'No especificado', 90, 115);\n    \n    if (informe.proyecto) {\n      doc.setFont('helvetica', 'bold');\n      doc.text('Proyecto:', 25, 130);\n      doc.setFont('helvetica', 'normal');\n      doc.text(informe.proyecto, 90, 130);\n    }\n    \n    // Añadir descripción con un recuadro\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 140, 180, 50, 3, 3, 'F');\n    \n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(colorPrimario);\n    doc.text('Descripción', 25, 155);\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.setTextColor(colorTexto);\n    \n    // Dividir descripción en líneas para evitar que se salga de la página\n    const descripcionLineas = doc.splitTextToSize(informe.descripcion || 'No hay descripción disponible', 160);\n    doc.text(descripcionLineas, 25, 170);\n    \n    // Añadir contenido principal con un recuadro\n    doc.setFillColor(colorFondo);\n    doc.roundedRect(15, 200, 180, 70, 3, 3, 'F');\n    \n    doc.setFontSize(14);\n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(colorPrimario);\n    doc.text('Contenido', 25, 215);\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.setTextColor(colorTexto);\n    \n    // Dividir contenido en líneas\n    const contenidoLineas = doc.splitTextToSize(informe.contenido || 'No hay contenido disponible', 160);\n    doc.text(contenidoLineas, 25, 230);\n    \n    // Añadir pie de página\n    const totalPaginas = doc.internal.getNumberOfPages();\n    \n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n      \n      // Añadir una franja decorativa en el pie de página\n      doc.setFillColor(colorPrimario);\n      doc.rect(0, 280, 210, 17, 'F');\n      \n      doc.setFontSize(10);\n      doc.setTextColor(255, 255, 255);\n      doc.setFont('helvetica', 'normal');\n      \n      // Pie de página con fecha y número de página\n      const fechaActual = new Date().toLocaleDateString('es-ES', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      \n      doc.text(`AlhambraCRM - Documento generado el ${fechaActual}`, 105, 290, { align: 'center' });\n      doc.text(`Página ${i} de ${totalPaginas}`, 180, 290);\n    }\n    \n    // Guardar el PDF con el nombre del informe\n    doc.save(`Informe_${informe.titulo.replace(/\\s+/g, '_')}.pdf`);\n    \n    return true;\n  } catch (error) {\n    console.error('Error al exportar informe a PDF:', error);\n    throw new Error('Error al generar el PDF del informe. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Función simplificada para exportar lista de informes en formato PDF\n * Esta versión es más básica pero más robusta para evitar errores\n */\nexport const exportarListaInformesPDF = (informes, filtros = {}) => {\n  try {\n    // Crear nueva instancia de PDF\n    const doc = new jsPDF();\n    \n    // Configurar colores\n    const colorPrimario = '#3498db';\n    \n    // Encabezado simple\n    doc.setFillColor(colorPrimario);\n    doc.rect(0, 0, 210, 30, 'F');\n    \n    doc.setFont('helvetica', 'bold');\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(22);\n    doc.text('AlhambraCRM', 105, 15, { align: 'center' });\n    doc.setFontSize(14);\n    doc.text('Listado de Informes', 105, 25, { align: 'center' });\n    \n    // Información básica\n    doc.setTextColor(0, 0, 0);\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    \n    doc.text(`Total de informes: ${informes.length}`, 20, 45);\n    doc.text(`Fecha: ${new Date().toLocaleDateString('es-ES')}`, 20, 55);\n    \n    // Tabla básica\n    const headers = ['Título', 'Tipo', 'Autor'];\n    const rows = [];\n    \n    // Preparar datos para la tabla\n    for (let i = 0; i < informes.length; i++) {\n      const informe = informes[i];\n      rows.push([\n        informe.titulo || 'Sin título',\n        informe.tipo || 'Sin tipo',\n        informe.autor || 'Sin autor'\n      ]);\n    }\n    \n    // Generar tabla\n    doc.autoTable({\n      head: [headers],\n      body: rows,\n      startY: 65,\n      theme: 'grid',\n      styles: {\n        fontSize: 10\n      },\n      headStyles: {\n        fillColor: colorPrimario\n      }\n    });\n    \n    // Pie de página simple\n    const totalPaginas = doc.internal.getNumberOfPages();\n    for (let i = 1; i <= totalPaginas; i++) {\n      doc.setPage(i);\n      doc.setFontSize(10);\n      doc.text(`Página ${i} de ${totalPaginas}`, 105, 290, { align: 'center' });\n    }\n    \n    // Guardar PDF\n    doc.save('Listado_Informes.pdf');\n    return true;\n  } catch (error) {\n    console.error('Error al exportar lista de informes a PDF:', error);\n    throw new Error('Error al generar el PDF. Por favor, inténtalo de nuevo.');\n  }\n};\n\n/**\n * Utilidad para exportar informes en formato Excel\n * En una implementación real, esto se haría con una biblioteca como xlsx\n * Por ahora, simplemente mostramos un mensaje de que esta funcionalidad está en desarrollo\n */\nexport const exportarInformeExcel = (informe) => {\n  alert('La exportación a Excel está en desarrollo. Estará disponible próximamente.');\n};\n\n/**\n * Formatear fecha para mostrar en el PDF\n */\nconst formatearFecha = (fechaStr) => {\n  if (!fechaStr) return '-';\n  \n  try {\n    const fecha = new Date(fechaStr);\n    if (isNaN(fecha.getTime())) return '-';\n    \n    return fecha.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return '-';\n  }\n};\n\nexport default {\n  exportarInformePDF,\n  exportarListaInformesPDF,\n  exportarInformeExcel\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}